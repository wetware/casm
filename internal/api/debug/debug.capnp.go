// Code generated by capnpc-go. DO NOT EDIT.

package debug

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	strconv "strconv"
)

type Profile uint16

// Profile_TypeID is the unique identifier for the type Profile.
const Profile_TypeID = 0x8fdb5f6d26c5dc7d

// Values of Profile.
const (
	Profile_cpu          Profile = 0
	Profile_allocs       Profile = 1
	Profile_block        Profile = 2
	Profile_goroutine    Profile = 3
	Profile_heap         Profile = 4
	Profile_mutex        Profile = 5
	Profile_threadcreate Profile = 6
)

// String returns the enum's constant name.
func (c Profile) String() string {
	switch c {
	case Profile_cpu:
		return "cpu"
	case Profile_allocs:
		return "allocs"
	case Profile_block:
		return "block"
	case Profile_goroutine:
		return "goroutine"
	case Profile_heap:
		return "heap"
	case Profile_mutex:
		return "mutex"
	case Profile_threadcreate:
		return "threadcreate"

	default:
		return ""
	}
}

// ProfileFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ProfileFromString(c string) Profile {
	switch c {
	case "cpu":
		return Profile_cpu
	case "allocs":
		return Profile_allocs
	case "block":
		return Profile_block
	case "goroutine":
		return Profile_goroutine
	case "heap":
		return Profile_heap
	case "mutex":
		return Profile_mutex
	case "threadcreate":
		return Profile_threadcreate

	default:
		return 0
	}
}

type Profile_List = capnp.EnumList[Profile]

func NewProfile_List(s *capnp.Segment, sz int32) (Profile_List, error) {
	return capnp.NewEnumList[Profile](s, sz)
}

type Debugger capnp.Client

// Debugger_TypeID is the unique identifier for the type Debugger.
const Debugger_TypeID = 0xc24c1801396ca74c

func (c Debugger) SysInfo(ctx context.Context, params func(Debugger_sysInfo_Params) error) (Debugger_sysInfo_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc24c1801396ca74c,
			MethodID:      0,
			InterfaceName: "debug.capnp:Debugger",
			MethodName:    "sysInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Debugger_sysInfo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Debugger_sysInfo_Results_Future{Future: ans.Future()}, release

}

func (c Debugger) EnvVars(ctx context.Context, params func(Debugger_envVars_Params) error) (Debugger_envVars_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc24c1801396ca74c,
			MethodID:      1,
			InterfaceName: "debug.capnp:Debugger",
			MethodName:    "envVars",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Debugger_envVars_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Debugger_envVars_Results_Future{Future: ans.Future()}, release

}

func (c Debugger) Profiler(ctx context.Context, params func(Debugger_profiler_Params) error) (Debugger_profiler_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc24c1801396ca74c,
			MethodID:      2,
			InterfaceName: "debug.capnp:Debugger",
			MethodName:    "profiler",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Debugger_profiler_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Debugger_profiler_Results_Future{Future: ans.Future()}, release

}

func (c Debugger) Tracer(ctx context.Context, params func(Debugger_tracer_Params) error) (Debugger_tracer_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc24c1801396ca74c,
			MethodID:      3,
			InterfaceName: "debug.capnp:Debugger",
			MethodName:    "tracer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Debugger_tracer_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Debugger_tracer_Results_Future{Future: ans.Future()}, release

}

func (c Debugger) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Debugger) String() string {
	return "Debugger(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Debugger) AddRef() Debugger {
	return Debugger(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Debugger) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Debugger) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Debugger) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Debugger) DecodeFromPtr(p capnp.Ptr) Debugger {
	return Debugger(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Debugger) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Debugger) IsSame(other Debugger) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Debugger) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Debugger) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Debugger_Server is a Debugger with a local implementation.
type Debugger_Server interface {
	SysInfo(context.Context, Debugger_sysInfo) error

	EnvVars(context.Context, Debugger_envVars) error

	Profiler(context.Context, Debugger_profiler) error

	Tracer(context.Context, Debugger_tracer) error
}

// Debugger_NewServer creates a new Server from an implementation of Debugger_Server.
func Debugger_NewServer(s Debugger_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Debugger_Methods(nil, s), s, c)
}

// Debugger_ServerToClient creates a new Client from an implementation of Debugger_Server.
// The caller is responsible for calling Release on the returned Client.
func Debugger_ServerToClient(s Debugger_Server) Debugger {
	return Debugger(capnp.NewClient(Debugger_NewServer(s)))
}

// Debugger_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Debugger_Methods(methods []server.Method, s Debugger_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc24c1801396ca74c,
			MethodID:      0,
			InterfaceName: "debug.capnp:Debugger",
			MethodName:    "sysInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SysInfo(ctx, Debugger_sysInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc24c1801396ca74c,
			MethodID:      1,
			InterfaceName: "debug.capnp:Debugger",
			MethodName:    "envVars",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.EnvVars(ctx, Debugger_envVars{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc24c1801396ca74c,
			MethodID:      2,
			InterfaceName: "debug.capnp:Debugger",
			MethodName:    "profiler",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Profiler(ctx, Debugger_profiler{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc24c1801396ca74c,
			MethodID:      3,
			InterfaceName: "debug.capnp:Debugger",
			MethodName:    "tracer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Tracer(ctx, Debugger_tracer{call})
		},
	})

	return methods
}

// Debugger_sysInfo holds the state for a server call to Debugger.sysInfo.
// See server.Call for documentation.
type Debugger_sysInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Debugger_sysInfo) Args() Debugger_sysInfo_Params {
	return Debugger_sysInfo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Debugger_sysInfo) AllocResults() (Debugger_sysInfo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_sysInfo_Results(r), err
}

// Debugger_envVars holds the state for a server call to Debugger.envVars.
// See server.Call for documentation.
type Debugger_envVars struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Debugger_envVars) Args() Debugger_envVars_Params {
	return Debugger_envVars_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Debugger_envVars) AllocResults() (Debugger_envVars_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_envVars_Results(r), err
}

// Debugger_profiler holds the state for a server call to Debugger.profiler.
// See server.Call for documentation.
type Debugger_profiler struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Debugger_profiler) Args() Debugger_profiler_Params {
	return Debugger_profiler_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Debugger_profiler) AllocResults() (Debugger_profiler_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_profiler_Results(r), err
}

// Debugger_tracer holds the state for a server call to Debugger.tracer.
// See server.Call for documentation.
type Debugger_tracer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Debugger_tracer) Args() Debugger_tracer_Params {
	return Debugger_tracer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Debugger_tracer) AllocResults() (Debugger_tracer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_tracer_Results(r), err
}

// Debugger_List is a list of Debugger.
type Debugger_List = capnp.CapList[Debugger]

// NewDebugger creates a new list of Debugger.
func NewDebugger_List(s *capnp.Segment, sz int32) (Debugger_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Debugger](l), err
}

type Debugger_sysInfo_Params capnp.Struct

// Debugger_sysInfo_Params_TypeID is the unique identifier for the type Debugger_sysInfo_Params.
const Debugger_sysInfo_Params_TypeID = 0xe5abfacae53c612f

func NewDebugger_sysInfo_Params(s *capnp.Segment) (Debugger_sysInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Debugger_sysInfo_Params(st), err
}

func NewRootDebugger_sysInfo_Params(s *capnp.Segment) (Debugger_sysInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Debugger_sysInfo_Params(st), err
}

func ReadRootDebugger_sysInfo_Params(msg *capnp.Message) (Debugger_sysInfo_Params, error) {
	root, err := msg.Root()
	return Debugger_sysInfo_Params(root.Struct()), err
}

func (s Debugger_sysInfo_Params) String() string {
	str, _ := text.Marshal(0xe5abfacae53c612f, capnp.Struct(s))
	return str
}

func (s Debugger_sysInfo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Debugger_sysInfo_Params) DecodeFromPtr(p capnp.Ptr) Debugger_sysInfo_Params {
	return Debugger_sysInfo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Debugger_sysInfo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Debugger_sysInfo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Debugger_sysInfo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Debugger_sysInfo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Debugger_sysInfo_Params_List is a list of Debugger_sysInfo_Params.
type Debugger_sysInfo_Params_List = capnp.StructList[Debugger_sysInfo_Params]

// NewDebugger_sysInfo_Params creates a new list of Debugger_sysInfo_Params.
func NewDebugger_sysInfo_Params_List(s *capnp.Segment, sz int32) (Debugger_sysInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Debugger_sysInfo_Params](l), err
}

// Debugger_sysInfo_Params_Future is a wrapper for a Debugger_sysInfo_Params promised by a client call.
type Debugger_sysInfo_Params_Future struct{ *capnp.Future }

func (f Debugger_sysInfo_Params_Future) Struct() (Debugger_sysInfo_Params, error) {
	p, err := f.Future.Ptr()
	return Debugger_sysInfo_Params(p.Struct()), err
}

type Debugger_sysInfo_Results capnp.Struct

// Debugger_sysInfo_Results_TypeID is the unique identifier for the type Debugger_sysInfo_Results.
const Debugger_sysInfo_Results_TypeID = 0x824eafd52229a594

func NewDebugger_sysInfo_Results(s *capnp.Segment) (Debugger_sysInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_sysInfo_Results(st), err
}

func NewRootDebugger_sysInfo_Results(s *capnp.Segment) (Debugger_sysInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_sysInfo_Results(st), err
}

func ReadRootDebugger_sysInfo_Results(msg *capnp.Message) (Debugger_sysInfo_Results, error) {
	root, err := msg.Root()
	return Debugger_sysInfo_Results(root.Struct()), err
}

func (s Debugger_sysInfo_Results) String() string {
	str, _ := text.Marshal(0x824eafd52229a594, capnp.Struct(s))
	return str
}

func (s Debugger_sysInfo_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Debugger_sysInfo_Results) DecodeFromPtr(p capnp.Ptr) Debugger_sysInfo_Results {
	return Debugger_sysInfo_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Debugger_sysInfo_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Debugger_sysInfo_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Debugger_sysInfo_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Debugger_sysInfo_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Debugger_sysInfo_Results) SysInfo() (SysInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SysInfo(p.Struct()), err
}

func (s Debugger_sysInfo_Results) HasSysInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Debugger_sysInfo_Results) SetSysInfo(v SysInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSysInfo sets the sysInfo field to a newly
// allocated SysInfo struct, preferring placement in s's segment.
func (s Debugger_sysInfo_Results) NewSysInfo() (SysInfo, error) {
	ss, err := NewSysInfo(capnp.Struct(s).Segment())
	if err != nil {
		return SysInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Debugger_sysInfo_Results_List is a list of Debugger_sysInfo_Results.
type Debugger_sysInfo_Results_List = capnp.StructList[Debugger_sysInfo_Results]

// NewDebugger_sysInfo_Results creates a new list of Debugger_sysInfo_Results.
func NewDebugger_sysInfo_Results_List(s *capnp.Segment, sz int32) (Debugger_sysInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Debugger_sysInfo_Results](l), err
}

// Debugger_sysInfo_Results_Future is a wrapper for a Debugger_sysInfo_Results promised by a client call.
type Debugger_sysInfo_Results_Future struct{ *capnp.Future }

func (f Debugger_sysInfo_Results_Future) Struct() (Debugger_sysInfo_Results, error) {
	p, err := f.Future.Ptr()
	return Debugger_sysInfo_Results(p.Struct()), err
}
func (p Debugger_sysInfo_Results_Future) SysInfo() SysInfo_Future {
	return SysInfo_Future{Future: p.Future.Field(0, nil)}
}

type Debugger_envVars_Params capnp.Struct

// Debugger_envVars_Params_TypeID is the unique identifier for the type Debugger_envVars_Params.
const Debugger_envVars_Params_TypeID = 0x83db2441501729b0

func NewDebugger_envVars_Params(s *capnp.Segment) (Debugger_envVars_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Debugger_envVars_Params(st), err
}

func NewRootDebugger_envVars_Params(s *capnp.Segment) (Debugger_envVars_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Debugger_envVars_Params(st), err
}

func ReadRootDebugger_envVars_Params(msg *capnp.Message) (Debugger_envVars_Params, error) {
	root, err := msg.Root()
	return Debugger_envVars_Params(root.Struct()), err
}

func (s Debugger_envVars_Params) String() string {
	str, _ := text.Marshal(0x83db2441501729b0, capnp.Struct(s))
	return str
}

func (s Debugger_envVars_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Debugger_envVars_Params) DecodeFromPtr(p capnp.Ptr) Debugger_envVars_Params {
	return Debugger_envVars_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Debugger_envVars_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Debugger_envVars_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Debugger_envVars_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Debugger_envVars_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Debugger_envVars_Params_List is a list of Debugger_envVars_Params.
type Debugger_envVars_Params_List = capnp.StructList[Debugger_envVars_Params]

// NewDebugger_envVars_Params creates a new list of Debugger_envVars_Params.
func NewDebugger_envVars_Params_List(s *capnp.Segment, sz int32) (Debugger_envVars_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Debugger_envVars_Params](l), err
}

// Debugger_envVars_Params_Future is a wrapper for a Debugger_envVars_Params promised by a client call.
type Debugger_envVars_Params_Future struct{ *capnp.Future }

func (f Debugger_envVars_Params_Future) Struct() (Debugger_envVars_Params, error) {
	p, err := f.Future.Ptr()
	return Debugger_envVars_Params(p.Struct()), err
}

type Debugger_envVars_Results capnp.Struct

// Debugger_envVars_Results_TypeID is the unique identifier for the type Debugger_envVars_Results.
const Debugger_envVars_Results_TypeID = 0xb0d6060017654bb5

func NewDebugger_envVars_Results(s *capnp.Segment) (Debugger_envVars_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_envVars_Results(st), err
}

func NewRootDebugger_envVars_Results(s *capnp.Segment) (Debugger_envVars_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_envVars_Results(st), err
}

func ReadRootDebugger_envVars_Results(msg *capnp.Message) (Debugger_envVars_Results, error) {
	root, err := msg.Root()
	return Debugger_envVars_Results(root.Struct()), err
}

func (s Debugger_envVars_Results) String() string {
	str, _ := text.Marshal(0xb0d6060017654bb5, capnp.Struct(s))
	return str
}

func (s Debugger_envVars_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Debugger_envVars_Results) DecodeFromPtr(p capnp.Ptr) Debugger_envVars_Results {
	return Debugger_envVars_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Debugger_envVars_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Debugger_envVars_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Debugger_envVars_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Debugger_envVars_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Debugger_envVars_Results) EnvVars() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Debugger_envVars_Results) HasEnvVars() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Debugger_envVars_Results) SetEnvVars(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEnvVars sets the envVars field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Debugger_envVars_Results) NewEnvVars(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Debugger_envVars_Results_List is a list of Debugger_envVars_Results.
type Debugger_envVars_Results_List = capnp.StructList[Debugger_envVars_Results]

// NewDebugger_envVars_Results creates a new list of Debugger_envVars_Results.
func NewDebugger_envVars_Results_List(s *capnp.Segment, sz int32) (Debugger_envVars_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Debugger_envVars_Results](l), err
}

// Debugger_envVars_Results_Future is a wrapper for a Debugger_envVars_Results promised by a client call.
type Debugger_envVars_Results_Future struct{ *capnp.Future }

func (f Debugger_envVars_Results_Future) Struct() (Debugger_envVars_Results, error) {
	p, err := f.Future.Ptr()
	return Debugger_envVars_Results(p.Struct()), err
}

type Debugger_profiler_Params capnp.Struct

// Debugger_profiler_Params_TypeID is the unique identifier for the type Debugger_profiler_Params.
const Debugger_profiler_Params_TypeID = 0x8a7b0758ee0ddecb

func NewDebugger_profiler_Params(s *capnp.Segment) (Debugger_profiler_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Debugger_profiler_Params(st), err
}

func NewRootDebugger_profiler_Params(s *capnp.Segment) (Debugger_profiler_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Debugger_profiler_Params(st), err
}

func ReadRootDebugger_profiler_Params(msg *capnp.Message) (Debugger_profiler_Params, error) {
	root, err := msg.Root()
	return Debugger_profiler_Params(root.Struct()), err
}

func (s Debugger_profiler_Params) String() string {
	str, _ := text.Marshal(0x8a7b0758ee0ddecb, capnp.Struct(s))
	return str
}

func (s Debugger_profiler_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Debugger_profiler_Params) DecodeFromPtr(p capnp.Ptr) Debugger_profiler_Params {
	return Debugger_profiler_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Debugger_profiler_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Debugger_profiler_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Debugger_profiler_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Debugger_profiler_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Debugger_profiler_Params) Profile() Profile {
	return Profile(capnp.Struct(s).Uint16(0))
}

func (s Debugger_profiler_Params) SetProfile(v Profile) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Debugger_profiler_Params_List is a list of Debugger_profiler_Params.
type Debugger_profiler_Params_List = capnp.StructList[Debugger_profiler_Params]

// NewDebugger_profiler_Params creates a new list of Debugger_profiler_Params.
func NewDebugger_profiler_Params_List(s *capnp.Segment, sz int32) (Debugger_profiler_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Debugger_profiler_Params](l), err
}

// Debugger_profiler_Params_Future is a wrapper for a Debugger_profiler_Params promised by a client call.
type Debugger_profiler_Params_Future struct{ *capnp.Future }

func (f Debugger_profiler_Params_Future) Struct() (Debugger_profiler_Params, error) {
	p, err := f.Future.Ptr()
	return Debugger_profiler_Params(p.Struct()), err
}

type Debugger_profiler_Results capnp.Struct

// Debugger_profiler_Results_TypeID is the unique identifier for the type Debugger_profiler_Results.
const Debugger_profiler_Results_TypeID = 0x95d1c46932719c75

func NewDebugger_profiler_Results(s *capnp.Segment) (Debugger_profiler_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_profiler_Results(st), err
}

func NewRootDebugger_profiler_Results(s *capnp.Segment) (Debugger_profiler_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_profiler_Results(st), err
}

func ReadRootDebugger_profiler_Results(msg *capnp.Message) (Debugger_profiler_Results, error) {
	root, err := msg.Root()
	return Debugger_profiler_Results(root.Struct()), err
}

func (s Debugger_profiler_Results) String() string {
	str, _ := text.Marshal(0x95d1c46932719c75, capnp.Struct(s))
	return str
}

func (s Debugger_profiler_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Debugger_profiler_Results) DecodeFromPtr(p capnp.Ptr) Debugger_profiler_Results {
	return Debugger_profiler_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Debugger_profiler_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Debugger_profiler_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Debugger_profiler_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Debugger_profiler_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Debugger_profiler_Results) Profiler() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Debugger_profiler_Results) HasProfiler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Debugger_profiler_Results) SetProfiler(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Debugger_profiler_Results_List is a list of Debugger_profiler_Results.
type Debugger_profiler_Results_List = capnp.StructList[Debugger_profiler_Results]

// NewDebugger_profiler_Results creates a new list of Debugger_profiler_Results.
func NewDebugger_profiler_Results_List(s *capnp.Segment, sz int32) (Debugger_profiler_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Debugger_profiler_Results](l), err
}

// Debugger_profiler_Results_Future is a wrapper for a Debugger_profiler_Results promised by a client call.
type Debugger_profiler_Results_Future struct{ *capnp.Future }

func (f Debugger_profiler_Results_Future) Struct() (Debugger_profiler_Results, error) {
	p, err := f.Future.Ptr()
	return Debugger_profiler_Results(p.Struct()), err
}
func (p Debugger_profiler_Results_Future) Profiler() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type Debugger_tracer_Params capnp.Struct

// Debugger_tracer_Params_TypeID is the unique identifier for the type Debugger_tracer_Params.
const Debugger_tracer_Params_TypeID = 0xaaf96929f804b361

func NewDebugger_tracer_Params(s *capnp.Segment) (Debugger_tracer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Debugger_tracer_Params(st), err
}

func NewRootDebugger_tracer_Params(s *capnp.Segment) (Debugger_tracer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Debugger_tracer_Params(st), err
}

func ReadRootDebugger_tracer_Params(msg *capnp.Message) (Debugger_tracer_Params, error) {
	root, err := msg.Root()
	return Debugger_tracer_Params(root.Struct()), err
}

func (s Debugger_tracer_Params) String() string {
	str, _ := text.Marshal(0xaaf96929f804b361, capnp.Struct(s))
	return str
}

func (s Debugger_tracer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Debugger_tracer_Params) DecodeFromPtr(p capnp.Ptr) Debugger_tracer_Params {
	return Debugger_tracer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Debugger_tracer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Debugger_tracer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Debugger_tracer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Debugger_tracer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Debugger_tracer_Params_List is a list of Debugger_tracer_Params.
type Debugger_tracer_Params_List = capnp.StructList[Debugger_tracer_Params]

// NewDebugger_tracer_Params creates a new list of Debugger_tracer_Params.
func NewDebugger_tracer_Params_List(s *capnp.Segment, sz int32) (Debugger_tracer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Debugger_tracer_Params](l), err
}

// Debugger_tracer_Params_Future is a wrapper for a Debugger_tracer_Params promised by a client call.
type Debugger_tracer_Params_Future struct{ *capnp.Future }

func (f Debugger_tracer_Params_Future) Struct() (Debugger_tracer_Params, error) {
	p, err := f.Future.Ptr()
	return Debugger_tracer_Params(p.Struct()), err
}

type Debugger_tracer_Results capnp.Struct

// Debugger_tracer_Results_TypeID is the unique identifier for the type Debugger_tracer_Results.
const Debugger_tracer_Results_TypeID = 0xf9a6bfc943cf37b8

func NewDebugger_tracer_Results(s *capnp.Segment) (Debugger_tracer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_tracer_Results(st), err
}

func NewRootDebugger_tracer_Results(s *capnp.Segment) (Debugger_tracer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Debugger_tracer_Results(st), err
}

func ReadRootDebugger_tracer_Results(msg *capnp.Message) (Debugger_tracer_Results, error) {
	root, err := msg.Root()
	return Debugger_tracer_Results(root.Struct()), err
}

func (s Debugger_tracer_Results) String() string {
	str, _ := text.Marshal(0xf9a6bfc943cf37b8, capnp.Struct(s))
	return str
}

func (s Debugger_tracer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Debugger_tracer_Results) DecodeFromPtr(p capnp.Ptr) Debugger_tracer_Results {
	return Debugger_tracer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Debugger_tracer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Debugger_tracer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Debugger_tracer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Debugger_tracer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Debugger_tracer_Results) Tracer() Sampler {
	p, _ := capnp.Struct(s).Ptr(0)
	return Sampler(p.Interface().Client())
}

func (s Debugger_tracer_Results) HasTracer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Debugger_tracer_Results) SetTracer(v Sampler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Debugger_tracer_Results_List is a list of Debugger_tracer_Results.
type Debugger_tracer_Results_List = capnp.StructList[Debugger_tracer_Results]

// NewDebugger_tracer_Results creates a new list of Debugger_tracer_Results.
func NewDebugger_tracer_Results_List(s *capnp.Segment, sz int32) (Debugger_tracer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Debugger_tracer_Results](l), err
}

// Debugger_tracer_Results_Future is a wrapper for a Debugger_tracer_Results promised by a client call.
type Debugger_tracer_Results_Future struct{ *capnp.Future }

func (f Debugger_tracer_Results_Future) Struct() (Debugger_tracer_Results, error) {
	p, err := f.Future.Ptr()
	return Debugger_tracer_Results(p.Struct()), err
}
func (p Debugger_tracer_Results_Future) Tracer() Sampler {
	return Sampler(p.Future.Field(0, nil).Client())
}

type SysInfo capnp.Struct

// SysInfo_TypeID is the unique identifier for the type SysInfo.
const SysInfo_TypeID = 0xb7089c9e44bf69bc

func NewSysInfo(s *capnp.Segment) (SysInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SysInfo(st), err
}

func NewRootSysInfo(s *capnp.Segment) (SysInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SysInfo(st), err
}

func ReadRootSysInfo(msg *capnp.Message) (SysInfo, error) {
	root, err := msg.Root()
	return SysInfo(root.Struct()), err
}

func (s SysInfo) String() string {
	str, _ := text.Marshal(0xb7089c9e44bf69bc, capnp.Struct(s))
	return str
}

func (s SysInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SysInfo) DecodeFromPtr(p capnp.Ptr) SysInfo {
	return SysInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SysInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SysInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SysInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SysInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SysInfo) Version() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SysInfo) HasVersion() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SysInfo) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SysInfo) SetVersion(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SysInfo) AppVersion() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SysInfo) HasAppVersion() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SysInfo) AppVersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SysInfo) SetAppVersion(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SysInfo) Runtime() (RuntimeInfo, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return RuntimeInfo(p.Struct()), err
}

func (s SysInfo) HasRuntime() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SysInfo) SetRuntime(v RuntimeInfo) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewRuntime sets the runtime field to a newly
// allocated RuntimeInfo struct, preferring placement in s's segment.
func (s SysInfo) NewRuntime() (RuntimeInfo, error) {
	ss, err := NewRuntimeInfo(capnp.Struct(s).Segment())
	if err != nil {
		return RuntimeInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SysInfo) Os() (OSInfo, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return OSInfo(p.Struct()), err
}

func (s SysInfo) HasOs() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SysInfo) SetOs(v OSInfo) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewOs sets the os field to a newly
// allocated OSInfo struct, preferring placement in s's segment.
func (s SysInfo) NewOs() (OSInfo, error) {
	ss, err := NewOSInfo(capnp.Struct(s).Segment())
	if err != nil {
		return OSInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SysInfo_List is a list of SysInfo.
type SysInfo_List = capnp.StructList[SysInfo]

// NewSysInfo creates a new list of SysInfo.
func NewSysInfo_List(s *capnp.Segment, sz int32) (SysInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[SysInfo](l), err
}

// SysInfo_Future is a wrapper for a SysInfo promised by a client call.
type SysInfo_Future struct{ *capnp.Future }

func (f SysInfo_Future) Struct() (SysInfo, error) {
	p, err := f.Future.Ptr()
	return SysInfo(p.Struct()), err
}
func (p SysInfo_Future) Runtime() RuntimeInfo_Future {
	return RuntimeInfo_Future{Future: p.Future.Field(2, nil)}
}
func (p SysInfo_Future) Os() OSInfo_Future {
	return OSInfo_Future{Future: p.Future.Field(3, nil)}
}

type RuntimeInfo capnp.Struct

// RuntimeInfo_TypeID is the unique identifier for the type RuntimeInfo.
const RuntimeInfo_TypeID = 0xd19693a973f6d246

func NewRuntimeInfo(s *capnp.Segment) (RuntimeInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RuntimeInfo(st), err
}

func NewRootRuntimeInfo(s *capnp.Segment) (RuntimeInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RuntimeInfo(st), err
}

func ReadRootRuntimeInfo(msg *capnp.Message) (RuntimeInfo, error) {
	root, err := msg.Root()
	return RuntimeInfo(root.Struct()), err
}

func (s RuntimeInfo) String() string {
	str, _ := text.Marshal(0xd19693a973f6d246, capnp.Struct(s))
	return str
}

func (s RuntimeInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RuntimeInfo) DecodeFromPtr(p capnp.Ptr) RuntimeInfo {
	return RuntimeInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RuntimeInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RuntimeInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RuntimeInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RuntimeInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RuntimeInfo) NumCPU() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s RuntimeInfo) SetNumCPU(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s RuntimeInfo) Os() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RuntimeInfo) HasOs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RuntimeInfo) OsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RuntimeInfo) SetOs(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RuntimeInfo) Arch() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RuntimeInfo) HasArch() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RuntimeInfo) ArchBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RuntimeInfo) SetArch(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RuntimeInfo) Compiler() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s RuntimeInfo) HasCompiler() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RuntimeInfo) CompilerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s RuntimeInfo) SetCompiler(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// RuntimeInfo_List is a list of RuntimeInfo.
type RuntimeInfo_List = capnp.StructList[RuntimeInfo]

// NewRuntimeInfo creates a new list of RuntimeInfo.
func NewRuntimeInfo_List(s *capnp.Segment, sz int32) (RuntimeInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[RuntimeInfo](l), err
}

// RuntimeInfo_Future is a wrapper for a RuntimeInfo promised by a client call.
type RuntimeInfo_Future struct{ *capnp.Future }

func (f RuntimeInfo_Future) Struct() (RuntimeInfo, error) {
	p, err := f.Future.Ptr()
	return RuntimeInfo(p.Struct()), err
}

type OSInfo capnp.Struct
type OSInfo_user OSInfo
type OSInfo_user_uid OSInfo
type OSInfo_user_gid OSInfo
type OSInfo_user_uid_Which uint16

const (
	OSInfo_user_uid_Which_none    OSInfo_user_uid_Which = 0
	OSInfo_user_uid_Which_numeric OSInfo_user_uid_Which = 1
	OSInfo_user_uid_Which_token   OSInfo_user_uid_Which = 2
)

func (w OSInfo_user_uid_Which) String() string {
	const s = "nonenumerictoken"
	switch w {
	case OSInfo_user_uid_Which_none:
		return s[0:4]
	case OSInfo_user_uid_Which_numeric:
		return s[4:11]
	case OSInfo_user_uid_Which_token:
		return s[11:16]

	}
	return "OSInfo_user_uid_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type OSInfo_user_gid_Which uint16

const (
	OSInfo_user_gid_Which_none    OSInfo_user_gid_Which = 0
	OSInfo_user_gid_Which_numeric OSInfo_user_gid_Which = 1
	OSInfo_user_gid_Which_token   OSInfo_user_gid_Which = 2
)

func (w OSInfo_user_gid_Which) String() string {
	const s = "nonenumerictoken"
	switch w {
	case OSInfo_user_gid_Which_none:
		return s[0:4]
	case OSInfo_user_gid_Which_numeric:
		return s[4:11]
	case OSInfo_user_gid_Which_token:
		return s[11:16]

	}
	return "OSInfo_user_gid_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// OSInfo_TypeID is the unique identifier for the type OSInfo.
const OSInfo_TypeID = 0xa78273130755c2b8

func NewOSInfo(s *capnp.Segment) (OSInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 7})
	return OSInfo(st), err
}

func NewRootOSInfo(s *capnp.Segment) (OSInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 7})
	return OSInfo(st), err
}

func ReadRootOSInfo(msg *capnp.Message) (OSInfo, error) {
	root, err := msg.Root()
	return OSInfo(root.Struct()), err
}

func (s OSInfo) String() string {
	str, _ := text.Marshal(0xa78273130755c2b8, capnp.Struct(s))
	return str
}

func (s OSInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OSInfo) DecodeFromPtr(p capnp.Ptr) OSInfo {
	return OSInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OSInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OSInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OSInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OSInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OSInfo) Pid() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s OSInfo) SetPid(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s OSInfo) Hostname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s OSInfo) HasHostname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OSInfo) HostnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s OSInfo) SetHostname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s OSInfo) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s OSInfo) HasArgs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OSInfo) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s OSInfo) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s OSInfo) User() OSInfo_user { return OSInfo_user(s) }

func (s OSInfo_user) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OSInfo_user) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OSInfo_user) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OSInfo_user) Username() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s OSInfo_user) HasUsername() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s OSInfo_user) UsernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s OSInfo_user) SetUsername(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s OSInfo_user) DisplayName() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s OSInfo_user) HasDisplayName() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s OSInfo_user) DisplayNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s OSInfo_user) SetDisplayName(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s OSInfo_user) HomeDir() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s OSInfo_user) HasHomeDir() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s OSInfo_user) HomeDirBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s OSInfo_user) SetHomeDir(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s OSInfo_user) Uid() OSInfo_user_uid { return OSInfo_user_uid(s) }

func (s OSInfo_user_uid) Which() OSInfo_user_uid_Which {
	return OSInfo_user_uid_Which(capnp.Struct(s).Uint16(8))
}
func (s OSInfo_user_uid) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OSInfo_user_uid) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OSInfo_user_uid) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OSInfo_user_uid) SetNone() {
	capnp.Struct(s).SetUint16(8, 0)

}

func (s OSInfo_user_uid) Numeric() uint64 {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != numeric")
	}
	return capnp.Struct(s).Uint64(16)
}

func (s OSInfo_user_uid) SetNumeric(v uint64) {
	capnp.Struct(s).SetUint16(8, 1)
	capnp.Struct(s).SetUint64(16, v)
}

func (s OSInfo_user_uid) Token() (string, error) {
	if capnp.Struct(s).Uint16(8) != 2 {
		panic("Which() != token")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s OSInfo_user_uid) HasToken() bool {
	if capnp.Struct(s).Uint16(8) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s OSInfo_user_uid) TokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s OSInfo_user_uid) SetToken(v string) error {
	capnp.Struct(s).SetUint16(8, 2)
	return capnp.Struct(s).SetText(5, v)
}

func (s OSInfo_user) Gid() OSInfo_user_gid { return OSInfo_user_gid(s) }

func (s OSInfo_user_gid) Which() OSInfo_user_gid_Which {
	return OSInfo_user_gid_Which(capnp.Struct(s).Uint16(10))
}
func (s OSInfo_user_gid) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OSInfo_user_gid) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OSInfo_user_gid) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OSInfo_user_gid) SetNone() {
	capnp.Struct(s).SetUint16(10, 0)

}

func (s OSInfo_user_gid) Numeric() uint64 {
	if capnp.Struct(s).Uint16(10) != 1 {
		panic("Which() != numeric")
	}
	return capnp.Struct(s).Uint64(24)
}

func (s OSInfo_user_gid) SetNumeric(v uint64) {
	capnp.Struct(s).SetUint16(10, 1)
	capnp.Struct(s).SetUint64(24, v)
}

func (s OSInfo_user_gid) Token() (string, error) {
	if capnp.Struct(s).Uint16(10) != 2 {
		panic("Which() != token")
	}
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s OSInfo_user_gid) HasToken() bool {
	if capnp.Struct(s).Uint16(10) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(6)
}

func (s OSInfo_user_gid) TokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s OSInfo_user_gid) SetToken(v string) error {
	capnp.Struct(s).SetUint16(10, 2)
	return capnp.Struct(s).SetText(6, v)
}

// OSInfo_List is a list of OSInfo.
type OSInfo_List = capnp.StructList[OSInfo]

// NewOSInfo creates a new list of OSInfo.
func NewOSInfo_List(s *capnp.Segment, sz int32) (OSInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 7}, sz)
	return capnp.StructList[OSInfo](l), err
}

// OSInfo_Future is a wrapper for a OSInfo promised by a client call.
type OSInfo_Future struct{ *capnp.Future }

func (f OSInfo_Future) Struct() (OSInfo, error) {
	p, err := f.Future.Ptr()
	return OSInfo(p.Struct()), err
}
func (p OSInfo_Future) User() OSInfo_user_Future { return OSInfo_user_Future{p.Future} }

// OSInfo_user_Future is a wrapper for a OSInfo_user promised by a client call.
type OSInfo_user_Future struct{ *capnp.Future }

func (f OSInfo_user_Future) Struct() (OSInfo_user, error) {
	p, err := f.Future.Ptr()
	return OSInfo_user(p.Struct()), err
}
func (p OSInfo_user_Future) Uid() OSInfo_user_uid_Future { return OSInfo_user_uid_Future{p.Future} }

// OSInfo_user_uid_Future is a wrapper for a OSInfo_user_uid promised by a client call.
type OSInfo_user_uid_Future struct{ *capnp.Future }

func (f OSInfo_user_uid_Future) Struct() (OSInfo_user_uid, error) {
	p, err := f.Future.Ptr()
	return OSInfo_user_uid(p.Struct()), err
}
func (p OSInfo_user_Future) Gid() OSInfo_user_gid_Future { return OSInfo_user_gid_Future{p.Future} }

// OSInfo_user_gid_Future is a wrapper for a OSInfo_user_gid promised by a client call.
type OSInfo_user_gid_Future struct{ *capnp.Future }

func (f OSInfo_user_gid_Future) Struct() (OSInfo_user_gid, error) {
	p, err := f.Future.Ptr()
	return OSInfo_user_gid(p.Struct()), err
}

type Snapshotter capnp.Client

// Snapshotter_TypeID is the unique identifier for the type Snapshotter.
const Snapshotter_TypeID = 0xca6d27d101913471

func (c Snapshotter) Snapshot(ctx context.Context, params func(Snapshotter_snapshot_Params) error) (Snapshotter_snapshot_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca6d27d101913471,
			MethodID:      0,
			InterfaceName: "debug.capnp:Snapshotter",
			MethodName:    "snapshot",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Snapshotter_snapshot_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Snapshotter_snapshot_Results_Future{Future: ans.Future()}, release

}

func (c Snapshotter) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Snapshotter) String() string {
	return "Snapshotter(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Snapshotter) AddRef() Snapshotter {
	return Snapshotter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Snapshotter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Snapshotter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Snapshotter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Snapshotter) DecodeFromPtr(p capnp.Ptr) Snapshotter {
	return Snapshotter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Snapshotter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Snapshotter) IsSame(other Snapshotter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Snapshotter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Snapshotter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Snapshotter_Server is a Snapshotter with a local implementation.
type Snapshotter_Server interface {
	Snapshot(context.Context, Snapshotter_snapshot) error
}

// Snapshotter_NewServer creates a new Server from an implementation of Snapshotter_Server.
func Snapshotter_NewServer(s Snapshotter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Snapshotter_Methods(nil, s), s, c)
}

// Snapshotter_ServerToClient creates a new Client from an implementation of Snapshotter_Server.
// The caller is responsible for calling Release on the returned Client.
func Snapshotter_ServerToClient(s Snapshotter_Server) Snapshotter {
	return Snapshotter(capnp.NewClient(Snapshotter_NewServer(s)))
}

// Snapshotter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Snapshotter_Methods(methods []server.Method, s Snapshotter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca6d27d101913471,
			MethodID:      0,
			InterfaceName: "debug.capnp:Snapshotter",
			MethodName:    "snapshot",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Snapshot(ctx, Snapshotter_snapshot{call})
		},
	})

	return methods
}

// Snapshotter_snapshot holds the state for a server call to Snapshotter.snapshot.
// See server.Call for documentation.
type Snapshotter_snapshot struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Snapshotter_snapshot) Args() Snapshotter_snapshot_Params {
	return Snapshotter_snapshot_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Snapshotter_snapshot) AllocResults() (Snapshotter_snapshot_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Snapshotter_snapshot_Results(r), err
}

// Snapshotter_List is a list of Snapshotter.
type Snapshotter_List = capnp.CapList[Snapshotter]

// NewSnapshotter creates a new list of Snapshotter.
func NewSnapshotter_List(s *capnp.Segment, sz int32) (Snapshotter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Snapshotter](l), err
}

type Snapshotter_snapshot_Params capnp.Struct

// Snapshotter_snapshot_Params_TypeID is the unique identifier for the type Snapshotter_snapshot_Params.
const Snapshotter_snapshot_Params_TypeID = 0xdfdba19e4a7c94f1

func NewSnapshotter_snapshot_Params(s *capnp.Segment) (Snapshotter_snapshot_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Snapshotter_snapshot_Params(st), err
}

func NewRootSnapshotter_snapshot_Params(s *capnp.Segment) (Snapshotter_snapshot_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Snapshotter_snapshot_Params(st), err
}

func ReadRootSnapshotter_snapshot_Params(msg *capnp.Message) (Snapshotter_snapshot_Params, error) {
	root, err := msg.Root()
	return Snapshotter_snapshot_Params(root.Struct()), err
}

func (s Snapshotter_snapshot_Params) String() string {
	str, _ := text.Marshal(0xdfdba19e4a7c94f1, capnp.Struct(s))
	return str
}

func (s Snapshotter_snapshot_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Snapshotter_snapshot_Params) DecodeFromPtr(p capnp.Ptr) Snapshotter_snapshot_Params {
	return Snapshotter_snapshot_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Snapshotter_snapshot_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Snapshotter_snapshot_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Snapshotter_snapshot_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Snapshotter_snapshot_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Snapshotter_snapshot_Params) Debug() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s Snapshotter_snapshot_Params) SetDebug(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

// Snapshotter_snapshot_Params_List is a list of Snapshotter_snapshot_Params.
type Snapshotter_snapshot_Params_List = capnp.StructList[Snapshotter_snapshot_Params]

// NewSnapshotter_snapshot_Params creates a new list of Snapshotter_snapshot_Params.
func NewSnapshotter_snapshot_Params_List(s *capnp.Segment, sz int32) (Snapshotter_snapshot_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Snapshotter_snapshot_Params](l), err
}

// Snapshotter_snapshot_Params_Future is a wrapper for a Snapshotter_snapshot_Params promised by a client call.
type Snapshotter_snapshot_Params_Future struct{ *capnp.Future }

func (f Snapshotter_snapshot_Params_Future) Struct() (Snapshotter_snapshot_Params, error) {
	p, err := f.Future.Ptr()
	return Snapshotter_snapshot_Params(p.Struct()), err
}

type Snapshotter_snapshot_Results capnp.Struct

// Snapshotter_snapshot_Results_TypeID is the unique identifier for the type Snapshotter_snapshot_Results.
const Snapshotter_snapshot_Results_TypeID = 0x8e15524f9d7d00dd

func NewSnapshotter_snapshot_Results(s *capnp.Segment) (Snapshotter_snapshot_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Snapshotter_snapshot_Results(st), err
}

func NewRootSnapshotter_snapshot_Results(s *capnp.Segment) (Snapshotter_snapshot_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Snapshotter_snapshot_Results(st), err
}

func ReadRootSnapshotter_snapshot_Results(msg *capnp.Message) (Snapshotter_snapshot_Results, error) {
	root, err := msg.Root()
	return Snapshotter_snapshot_Results(root.Struct()), err
}

func (s Snapshotter_snapshot_Results) String() string {
	str, _ := text.Marshal(0x8e15524f9d7d00dd, capnp.Struct(s))
	return str
}

func (s Snapshotter_snapshot_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Snapshotter_snapshot_Results) DecodeFromPtr(p capnp.Ptr) Snapshotter_snapshot_Results {
	return Snapshotter_snapshot_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Snapshotter_snapshot_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Snapshotter_snapshot_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Snapshotter_snapshot_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Snapshotter_snapshot_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Snapshotter_snapshot_Results) Snapshot() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Snapshotter_snapshot_Results) HasSnapshot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Snapshotter_snapshot_Results) SetSnapshot(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Snapshotter_snapshot_Results_List is a list of Snapshotter_snapshot_Results.
type Snapshotter_snapshot_Results_List = capnp.StructList[Snapshotter_snapshot_Results]

// NewSnapshotter_snapshot_Results creates a new list of Snapshotter_snapshot_Results.
func NewSnapshotter_snapshot_Results_List(s *capnp.Segment, sz int32) (Snapshotter_snapshot_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Snapshotter_snapshot_Results](l), err
}

// Snapshotter_snapshot_Results_Future is a wrapper for a Snapshotter_snapshot_Results promised by a client call.
type Snapshotter_snapshot_Results_Future struct{ *capnp.Future }

func (f Snapshotter_snapshot_Results_Future) Struct() (Snapshotter_snapshot_Results, error) {
	p, err := f.Future.Ptr()
	return Snapshotter_snapshot_Results(p.Struct()), err
}

type Sampler capnp.Client

// Sampler_TypeID is the unique identifier for the type Sampler.
const Sampler_TypeID = 0xcb9867bf09c9fd97

func (c Sampler) Sample(ctx context.Context, params func(Sampler_sample_Params) error) (Sampler_sample_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcb9867bf09c9fd97,
			MethodID:      0,
			InterfaceName: "debug.capnp:Sampler",
			MethodName:    "sample",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Sampler_sample_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Sampler_sample_Results_Future{Future: ans.Future()}, release

}

func (c Sampler) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Sampler) String() string {
	return "Sampler(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Sampler) AddRef() Sampler {
	return Sampler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Sampler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Sampler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Sampler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Sampler) DecodeFromPtr(p capnp.Ptr) Sampler {
	return Sampler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Sampler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Sampler) IsSame(other Sampler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Sampler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Sampler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Sampler_Server is a Sampler with a local implementation.
type Sampler_Server interface {
	Sample(context.Context, Sampler_sample) error
}

// Sampler_NewServer creates a new Server from an implementation of Sampler_Server.
func Sampler_NewServer(s Sampler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Sampler_Methods(nil, s), s, c)
}

// Sampler_ServerToClient creates a new Client from an implementation of Sampler_Server.
// The caller is responsible for calling Release on the returned Client.
func Sampler_ServerToClient(s Sampler_Server) Sampler {
	return Sampler(capnp.NewClient(Sampler_NewServer(s)))
}

// Sampler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Sampler_Methods(methods []server.Method, s Sampler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcb9867bf09c9fd97,
			MethodID:      0,
			InterfaceName: "debug.capnp:Sampler",
			MethodName:    "sample",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sample(ctx, Sampler_sample{call})
		},
	})

	return methods
}

// Sampler_sample holds the state for a server call to Sampler.sample.
// See server.Call for documentation.
type Sampler_sample struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Sampler_sample) Args() Sampler_sample_Params {
	return Sampler_sample_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Sampler_sample) AllocResults() (Sampler_sample_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sampler_sample_Results(r), err
}

// Sampler_List is a list of Sampler.
type Sampler_List = capnp.CapList[Sampler]

// NewSampler creates a new list of Sampler.
func NewSampler_List(s *capnp.Segment, sz int32) (Sampler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Sampler](l), err
}

type Sampler_Writer capnp.Client

// Sampler_Writer_TypeID is the unique identifier for the type Sampler_Writer.
const Sampler_Writer_TypeID = 0xbad68cb175d6ef9e

func (c Sampler_Writer) Write(ctx context.Context, params func(Sampler_Writer_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbad68cb175d6ef9e,
			MethodID:      0,
			InterfaceName: "debug.capnp:Sampler.Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Sampler_Writer_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c Sampler_Writer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Sampler_Writer) String() string {
	return "Sampler_Writer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Sampler_Writer) AddRef() Sampler_Writer {
	return Sampler_Writer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Sampler_Writer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Sampler_Writer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Sampler_Writer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Sampler_Writer) DecodeFromPtr(p capnp.Ptr) Sampler_Writer {
	return Sampler_Writer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Sampler_Writer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Sampler_Writer) IsSame(other Sampler_Writer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Sampler_Writer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Sampler_Writer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Sampler_Writer_Server is a Sampler_Writer with a local implementation.
type Sampler_Writer_Server interface {
	Write(context.Context, Sampler_Writer_write) error
}

// Sampler_Writer_NewServer creates a new Server from an implementation of Sampler_Writer_Server.
func Sampler_Writer_NewServer(s Sampler_Writer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Sampler_Writer_Methods(nil, s), s, c)
}

// Sampler_Writer_ServerToClient creates a new Client from an implementation of Sampler_Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Sampler_Writer_ServerToClient(s Sampler_Writer_Server) Sampler_Writer {
	return Sampler_Writer(capnp.NewClient(Sampler_Writer_NewServer(s)))
}

// Sampler_Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Sampler_Writer_Methods(methods []server.Method, s Sampler_Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbad68cb175d6ef9e,
			MethodID:      0,
			InterfaceName: "debug.capnp:Sampler.Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Sampler_Writer_write{call})
		},
	})

	return methods
}

// Sampler_Writer_write holds the state for a server call to Sampler_Writer.write.
// See server.Call for documentation.
type Sampler_Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Sampler_Writer_write) Args() Sampler_Writer_write_Params {
	return Sampler_Writer_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Sampler_Writer_write) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// Sampler_Writer_List is a list of Sampler_Writer.
type Sampler_Writer_List = capnp.CapList[Sampler_Writer]

// NewSampler_Writer creates a new list of Sampler_Writer.
func NewSampler_Writer_List(s *capnp.Segment, sz int32) (Sampler_Writer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Sampler_Writer](l), err
}

type Sampler_Writer_write_Params capnp.Struct

// Sampler_Writer_write_Params_TypeID is the unique identifier for the type Sampler_Writer_write_Params.
const Sampler_Writer_write_Params_TypeID = 0xe9c5e5ae3dbeef0f

func NewSampler_Writer_write_Params(s *capnp.Segment) (Sampler_Writer_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sampler_Writer_write_Params(st), err
}

func NewRootSampler_Writer_write_Params(s *capnp.Segment) (Sampler_Writer_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Sampler_Writer_write_Params(st), err
}

func ReadRootSampler_Writer_write_Params(msg *capnp.Message) (Sampler_Writer_write_Params, error) {
	root, err := msg.Root()
	return Sampler_Writer_write_Params(root.Struct()), err
}

func (s Sampler_Writer_write_Params) String() string {
	str, _ := text.Marshal(0xe9c5e5ae3dbeef0f, capnp.Struct(s))
	return str
}

func (s Sampler_Writer_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Sampler_Writer_write_Params) DecodeFromPtr(p capnp.Ptr) Sampler_Writer_write_Params {
	return Sampler_Writer_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Sampler_Writer_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Sampler_Writer_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Sampler_Writer_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Sampler_Writer_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Sampler_Writer_write_Params) Sample() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Sampler_Writer_write_Params) HasSample() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Sampler_Writer_write_Params) SetSample(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Sampler_Writer_write_Params_List is a list of Sampler_Writer_write_Params.
type Sampler_Writer_write_Params_List = capnp.StructList[Sampler_Writer_write_Params]

// NewSampler_Writer_write_Params creates a new list of Sampler_Writer_write_Params.
func NewSampler_Writer_write_Params_List(s *capnp.Segment, sz int32) (Sampler_Writer_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Sampler_Writer_write_Params](l), err
}

// Sampler_Writer_write_Params_Future is a wrapper for a Sampler_Writer_write_Params promised by a client call.
type Sampler_Writer_write_Params_Future struct{ *capnp.Future }

func (f Sampler_Writer_write_Params_Future) Struct() (Sampler_Writer_write_Params, error) {
	p, err := f.Future.Ptr()
	return Sampler_Writer_write_Params(p.Struct()), err
}

type Sampler_sample_Params capnp.Struct

// Sampler_sample_Params_TypeID is the unique identifier for the type Sampler_sample_Params.
const Sampler_sample_Params_TypeID = 0xd9d25e11d54da126

func NewSampler_sample_Params(s *capnp.Segment) (Sampler_sample_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Sampler_sample_Params(st), err
}

func NewRootSampler_sample_Params(s *capnp.Segment) (Sampler_sample_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Sampler_sample_Params(st), err
}

func ReadRootSampler_sample_Params(msg *capnp.Message) (Sampler_sample_Params, error) {
	root, err := msg.Root()
	return Sampler_sample_Params(root.Struct()), err
}

func (s Sampler_sample_Params) String() string {
	str, _ := text.Marshal(0xd9d25e11d54da126, capnp.Struct(s))
	return str
}

func (s Sampler_sample_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Sampler_sample_Params) DecodeFromPtr(p capnp.Ptr) Sampler_sample_Params {
	return Sampler_sample_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Sampler_sample_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Sampler_sample_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Sampler_sample_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Sampler_sample_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Sampler_sample_Params) Writer() Sampler_Writer {
	p, _ := capnp.Struct(s).Ptr(0)
	return Sampler_Writer(p.Interface().Client())
}

func (s Sampler_sample_Params) HasWriter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Sampler_sample_Params) SetWriter(v Sampler_Writer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Sampler_sample_Params) Duration() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Sampler_sample_Params) SetDuration(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Sampler_sample_Params_List is a list of Sampler_sample_Params.
type Sampler_sample_Params_List = capnp.StructList[Sampler_sample_Params]

// NewSampler_sample_Params creates a new list of Sampler_sample_Params.
func NewSampler_sample_Params_List(s *capnp.Segment, sz int32) (Sampler_sample_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Sampler_sample_Params](l), err
}

// Sampler_sample_Params_Future is a wrapper for a Sampler_sample_Params promised by a client call.
type Sampler_sample_Params_Future struct{ *capnp.Future }

func (f Sampler_sample_Params_Future) Struct() (Sampler_sample_Params, error) {
	p, err := f.Future.Ptr()
	return Sampler_sample_Params(p.Struct()), err
}
func (p Sampler_sample_Params_Future) Writer() Sampler_Writer {
	return Sampler_Writer(p.Future.Field(0, nil).Client())
}

type Sampler_sample_Results capnp.Struct

// Sampler_sample_Results_TypeID is the unique identifier for the type Sampler_sample_Results.
const Sampler_sample_Results_TypeID = 0xca4856ba299657e7

func NewSampler_sample_Results(s *capnp.Segment) (Sampler_sample_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sampler_sample_Results(st), err
}

func NewRootSampler_sample_Results(s *capnp.Segment) (Sampler_sample_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Sampler_sample_Results(st), err
}

func ReadRootSampler_sample_Results(msg *capnp.Message) (Sampler_sample_Results, error) {
	root, err := msg.Root()
	return Sampler_sample_Results(root.Struct()), err
}

func (s Sampler_sample_Results) String() string {
	str, _ := text.Marshal(0xca4856ba299657e7, capnp.Struct(s))
	return str
}

func (s Sampler_sample_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Sampler_sample_Results) DecodeFromPtr(p capnp.Ptr) Sampler_sample_Results {
	return Sampler_sample_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Sampler_sample_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Sampler_sample_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Sampler_sample_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Sampler_sample_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Sampler_sample_Results_List is a list of Sampler_sample_Results.
type Sampler_sample_Results_List = capnp.StructList[Sampler_sample_Results]

// NewSampler_sample_Results creates a new list of Sampler_sample_Results.
func NewSampler_sample_Results_List(s *capnp.Segment, sz int32) (Sampler_sample_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Sampler_sample_Results](l), err
}

// Sampler_sample_Results_Future is a wrapper for a Sampler_sample_Results promised by a client call.
type Sampler_sample_Results_Future struct{ *capnp.Future }

func (f Sampler_sample_Results_Future) Struct() (Sampler_sample_Results, error) {
	p, err := f.Future.Ptr()
	return Sampler_sample_Results(p.Struct()), err
}

const schema_a90d3b8939007f97 = "x\xda\xa4Vol\x1cW\x11\x9fyo\xf7\xf6\xce>" +
	"\xf7\xfc\xb2\x17%-TV,\xab\xc8\x161\x8d\x03\x82" +
	"\x18\xaas\xdc\x944&n\xef9$\xa5\x15m\xd9\x9c" +
	"_|Koo\xcf\xbbwM-\x1a\x99\x94Fj\x11" +
	"\x01\"BC\xab\x10\x91HP\xb5\x08\xdc\x08UT\x15" +
	"\"\xc8\xa2\x1f\x92~@\xa9\x94\x88\x12\x1a$\xa4\xa8\xe2" +
	"\x0bQ\x91\x02\x04d\x16\xcd\xde\xed\xed\xfar\x06$>" +
	"\xdd\xde\xee\xbc\xf9\xf3\xfb\xcd\xfc\xde\xdc]\xd0&\xb4-" +
	"}F/0\xf9U=\x15\x1c\xff\xe1\xf0\xe0\xa5\xa5\x07" +
	"\x9e\x01\xb1\x1e\x01t4\x00\xb6\xda\xfa\x08\x02\x9a\xf3z" +
	"\x010xmxCq\xfb\xd0\x95\xaf5\x0d4\xfa~" +
	"L\x1fD\xd0\x82\xb7\xaf\xf6\xfd\xf9\x0b\xc6W\xbe\x0er" +
	"=F\x9f\x16\x9aG\x0f\xd3\xd1\x95\xf7\x0e}\xff\xc1\x99" +
	"\xf5\xdf\x14\x1b\xdb\x9eO\xebS\xf4\xf9'\xa1\xe7C\xbf" +
	"\x7f\xeb.\xe7\xf1+\xdf\x02\x91e\xff<\xb1\xb8\xed\xf9" +
	"O\xf7\xbd\x02h^\xd4\xcf\x98\xef\xea\x06\x80yI_" +
	"\x02\x0c\x1a'\xe7\xc7\xec__\xfcn2\xc3-\xa91" +
	"\xf2\xb3-E~&O<r\xe3/'k/\x82\xdc" +
	"\x88Zp\xf4\xdc\xcaoo\xbf\xfa\xb7\xab\xb0\xd70\x90" +
	"\xa3f>\x9a\xfa#\xa0i\xa5\xc8\xd7\x1b\xcb{\x0d\xd3" +
	"\x7f\xe6e\x90Y\xd4\xa2\x98\xbaA\xc1n\xa6^21" +
	"|ZI\xbd\x0f\x18X?\xd3\xfe>l\xdf|5Q" +
	"\xf7y\xe3\x0e\xaa[-M\xff\xe0\xb1\xd2\xc0R\xd7x" +
	"\xbay\xd6\xa0x\xaf\x1bK\x80\xd7_\xff\x9c\xda\x90\xba" +
	"\xfcZ\"\xf3\xe9t\x08\xd0\xde4e\xfe\x0b\xfb\xdc\x8e" +
	"S'\xd3?\x07\x91\xc5v6\x14\xca<\x92>c\x1e" +
	"M\xd3\xd3\xf3i\xca\xe6\xd4\xf5\xcb\x8d\xb3\xdf\xb8\xfc&" +
	"\x88<\x0fN\xac\x9c\xcf\x9c\x9b\xfb\xde\xdb@ue~" +
	"g:\x192\xb43;\xcdc\xf4\x14\xec~\xb9\xb2\x0d" +
	"7\xee^\x06\x91\xe5\x09`\x172\xaf\x9a\x87\xc9`\xeb" +
	"\xa1\x8c\x81\xe6\xa6\x1e\xb2}\xff\xa1\x17\x86\xdf\xdcw\xff" +
	"\x05\x10\xf9\xa8\xccLOX\xe6\xfc\xc7\x8f\xe1\xc5\x8f8" +
	"\x17:\xbc|\x90Y6o\x86\x01odv\xb6\x9c\xb4" +
	"\x13Zm\x9a\xe99c\x8a\x9e\x0d\x00\xe6\xed=;\xcd" +
	"\xed\xa1\xe9g\xdf\xf9\xab\xff\xcaw^\xb8H\x0c\xc45" +
	"s\xf27\xdc\xb3ln!#ss\x0f\xd5|\xd7\xe9" +
	"\xe9K\xe2\xb1w\xde\x05\x99\xc76~z\xef:\xc2\xaf" +
	"\xaf\xf7 `\x8c\xbd4Q\x8b\xc9]o\x18\x08`:" +
	"\xbd\xcb\x80[\x9d\xde\x01\x04\x0c>8\xfe\xf4\xd4\xa9\xd3" +
	"W\xfe@\xa4E\x85Ng'C.\xb2\xc4\xc5\xc7\xac" +
	"\xcf\\\xbb\xf0\x8f\x1f_K\xf0\xdd\xc8\x86}\x9e\xbb\xfe" +
	"\xcb{~z\xed\xad?\x81\xf8P;\x8dG\x9bGU" +
	"x\xf4\x8dO\xfe\xe6\xde\xf3\xe7~t3\xd9\xa1G\xe8" +
	",\x9aG\xb3\x05x8\x98U\xfb\x1bs\xa3%\x8b\xd7" +
	"\xaa\xb5\xf1\x1d\xf4gNy\xa3\xfe\x82\xbf\xabz\xc0\x1d" +
	"\x9aQ~\xaeQ\xa9\xfbR\xe3\x1a\x80\x86\x00\xa2o\x12" +
	"@\xa69\xca<\xc3\xc5\x96\x1d\xf6\xc7\xfd\x02\x88\xfd\x80" +
	"k\xf8U\xd5'\xf7Y\x9e?T\xb4<\xc3r\xfc5" +
	"\xacj\x9e{\xc0\xae(o\xa8h\xe5<\xcbY3z" +
	"\xcb\x0es\xf1\xbc\x02b.\x11]#\xbf{\xaaV\xcd" +
	"/\xbb\xf5:\x15\xd6z\xa6\xca\xa80\x80\xa4\xf3)\x00" +
	"\x99\xe5(72\x0c\"K\x00\xc0>`\xd8\x97p\x8b" +
	"\xe4\xb6\xe8\xb9\x07\x0c\xbb\xa2\x8a\x88\xf2\xc3\xc8\x00\xc4\xf4" +
	" \xc5\x17\xf7\x8d\x03 \x13\xf7\x8c\x01 \x17\x9f\x98\x01" +
	"@Ml\x19\x01@]\x0c\xd3\xcb\x94\xd8\xf4e\x00\xa3" +
	"Tk\x14\xacJ\xc5-\xf9\x03\xfb+n\xe9\x89`\xce" +
	"\xf5\xdcF\xdd\xae\x02\xaa\\YY\xb5\x01\xa7QWO" +
	"\x05\xf5\xb2\xa7\xac\xd9\x92\x079e\xd5\xd5\x7f\xc3lF" +
	"\x0d\xf8\x9d\x94%\xeb\x8a\x0c\xa9\xaeu\x1a\x07\xc4u\x89" +
	"\xca\x189}p\x0f\x91:\xda\xf0\x957j4\xecY" +
	"\x99\xe5Z6\x08\xf2\x98\x02\x10\xf7\x8d\x00\xc8\x09\x8er" +
	"7\xc3;\xf1_\x01\xcbSS\x89]D\xcc\x0e\x8e\xb2" +
	"\xc8\xf0N\xb6\x12\xe8yL\x13$c\x00\xf2~\x8e\xf2" +
	"\xf3\x0csU\xb7\xaa \xb5Xm8\xca\xb3K\x98\x01" +
	"\x86\x19\xc0\x81\xba\xfb\x84\xaab\x16\x18f;1\xa6L" +
	"\xf8\x01\x97 \xeeo\x97c\x0d\x02\xc8/r\x94e\x86" +
	"\x88\xe1\x00\x0aE%\xcer\x945\x86\x82a>\xe4\xc3" +
	"\xa1T\xcb\x1c\xe5\xb3\x0c\x91cb(\xc5\xe1\x11`F" +
	"\xcd\x9eE\x1d\x18\xea\x80A\xd9\xf5\xebU\xcbQ\x04K" +
	"+\x95\x9c\xe5\xcd\xf9x\x1b`\x91c\xf8\xee6\xc0\x1c" +
	"\x81\xb2\x06\x05u\xcf*\x85M\xebY<\xd1\xdb\xb7B" +
	":\x97\x804\xd3\x05R\x9e\xc7\x9e.\x90\xa6\xf2\xd8\xfb" +
	"\x7fA\xda}\x16\xff\xd3\x8c\x0f1\\l\xd9u\x00\xb1" +
	"\x9a\xa7=\x0b\xfe.\xa3z\x0bQ\x931Q\xa2\xcd\xd4" +
	"#I\xa6X\x8b\xa9\xc9\x16Su\x86\x82\xf3<r\x00" +
	"1\x7f\x07\x80\xacp\x94O1\\|Ry\xbe\xed\xc6" +
	"5Y\xb5\xda>z\x05<~\xb9\xe85\xaau\xdbQ" +
	"\xd8\x1fkyS\x8e\xb8\xebc\x7f\xac\xc2\x1d\x1a\x152" +
	"\xb4\xc7rj\x15\xe5\x8d>\xe4\xd9u\xae<\xaaD\xe3" +
	":@[c\xb1z\xf6W\x07\xb7\xbe\xf4\xf8\x8bB\x8c" +
	"\x01\x13\xba1p\xd0\xb3\xebj\x02\x8b\xd8\x81\x06A\x9c" +
	"#\x8c\x9bp\x90\x93H\xc21Zj\xc4\xfc$0\xa1" +
	"\x0c\x8c\xd7\x18\xa4+\x19\xe8N~\x98\xbeM\x1b\xc8\xda" +
	"\x8b\x0cF\xab\x86\xd8>\x05Ll3\x90\xb7\xd7\x00\x8c" +
	"D^l\x1e\x07&6\x19\x91,O\xb4\xc9\x9bX5" +
	"\xf7\x13Xh\xf6\xea\xea\xdcy\x12\x06?\xfcm\xca$" +
	"\xafwtsBQ!\x06*\xba\xc7\xf0=hmW" +
	"\x82r\xcd\x18I-\xed\x02\x17\x854*\xca\x93\x1a&" +
	"\xb7\x09\x1c/\x10\x17\xf4>t\x1f\xdd\xb9\x18\xed\x05B" +
	"\x8c\x87<\x14\x9a\xb9\xae\xf6\x1c\xe69\xd3\xec\x07\xc2\x02" +
	":Zs\xbc\x8b\x86P\xbf}\x89\xa3\xac$4\xc4\x1e" +
	"I\xb4+g\xcd\xcet\xa6\xe2\xce,T\x1b\xce\xbd\xc5" +
	"\xbd\x98\x06\x86\xe9f\xa7\xc5\xfaQ*\xb7\x1b\xb6\xe4:" +
	"\xb5Hw\xbb\x0ef\x07\xf2$#\x0e\xfa2\xdd\xcey" +
	"\x98r\x1e\xe2(\xef\x8es\xdeL\x99|\x94\xa3\xfc\x14" +
	"\xc3B\xd8\x8f\x1e\x8a\x18D\xba\x8e(N\xc3\xb3\xea\xb6" +
	"[\xa5\xd8\x91\xe0\xad%O \xf3\\\xebo\x15z\x88" +
	"\xdc?\xcdQ>G\x13\xcc\xf3\xa8\x01\x88#\xfb\x01\xe4" +
	"\xb3\x1c\xe5\xb7\x09'-\x8f:\x808J\x13\xfc\x1cG" +
	"y\xbc\xa5\xb5\xed\xd5W\x1c\x1b\x04\x86\xc4m{;\x15" +
	"\x0b\x83\xc0\x02\x8a\xd6!\xb9\xc1\xac\xed\xd7*\xd6\xc2\x03" +
	"`X\x8ej\xcfu\xd9u\xd4\x0e\xdb\x8b\xfe\xd3\x9dD" +
	"\"\xfa?\\\xf3!\x8a\xfe\xaaK~,\xde \x06B" +
	"\x07\x98\x02\x86\xa95u2\xda\x85:w\x16\xadS5" +
	"\x947\x1a2\xd0-\xe8x\x1c\xb4\xd5\xae\xb7,\x15]" +
	"/\x13\x9a?\xa3C\x9c\x93\xbe\x9af(\x92\x8b7Q" +
	"\xfe\xef\x00\x00\x00\xff\xffy\xd8\x86\x8a"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a90d3b8939007f97,
		Nodes: []uint64{
			0x824eafd52229a594,
			0x83db2441501729b0,
			0x8a7b0758ee0ddecb,
			0x8e15524f9d7d00dd,
			0x8fdb5f6d26c5dc7d,
			0x95d1c46932719c75,
			0x99709cf2f55a9742,
			0xa78273130755c2b8,
			0xaaf96929f804b361,
			0xaf1f635ea04daf65,
			0xb0d6060017654bb5,
			0xb7089c9e44bf69bc,
			0xbad68cb175d6ef9e,
			0xc24c1801396ca74c,
			0xca4856ba299657e7,
			0xca6d27d101913471,
			0xcb9867bf09c9fd97,
			0xd19693a973f6d246,
			0xd9d25e11d54da126,
			0xdef7de19d8fdbf8d,
			0xdfdba19e4a7c94f1,
			0xe5abfacae53c612f,
			0xe9c5e5ae3dbeef0f,
			0xf9a6bfc943cf37b8,
		},
		Compressed: true,
	})
}
