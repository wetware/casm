// Code generated by capnpc-go. DO NOT EDIT.

package gsurv

import (
	strconv "strconv"

	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type GSurvRequest struct{ capnp.Struct }

// GSurvRequest_TypeID is the unique identifier for the type GSurvRequest.
const GSurvRequest_TypeID = 0xd70632a2f6221d59

func NewGSurvRequest(s *capnp.Segment) (GSurvRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GSurvRequest{st}, err
}

func NewRootGSurvRequest(s *capnp.Segment) (GSurvRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GSurvRequest{st}, err
}

func ReadRootGSurvRequest(msg *capnp.Message) (GSurvRequest, error) {
	root, err := msg.Root()
	return GSurvRequest{root.Struct()}, err
}

func (s GSurvRequest) String() string {
	str, _ := text.Marshal(0xd70632a2f6221d59, s.Struct)
	return str
}

func (s GSurvRequest) Src() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s GSurvRequest) HasSrc() bool {
	return s.Struct.HasPtr(0)
}

func (s GSurvRequest) SetSrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s GSurvRequest) Distance() uint8 {
	return s.Struct.Uint8(0)
}

func (s GSurvRequest) SetDistance(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s GSurvRequest) Namespace() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GSurvRequest) HasNamespace() bool {
	return s.Struct.HasPtr(1)
}

func (s GSurvRequest) NamespaceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GSurvRequest) SetNamespace(v string) error {
	return s.Struct.SetText(1, v)
}

// GSurvRequest_List is a list of GSurvRequest.
type GSurvRequest_List struct{ capnp.List }

// NewGSurvRequest creates a new list of GSurvRequest.
func NewGSurvRequest_List(s *capnp.Segment, sz int32) (GSurvRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return GSurvRequest_List{l}, err
}

func (s GSurvRequest_List) At(i int) GSurvRequest { return GSurvRequest{s.List.Struct(i)} }

func (s GSurvRequest_List) Set(i int, v GSurvRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s GSurvRequest_List) String() string {
	str, _ := text.MarshalList(0xd70632a2f6221d59, s.List)
	return str
}

// GSurvRequest_Future is a wrapper for a GSurvRequest promised by a client call.
type GSurvRequest_Future struct{ *capnp.Future }

func (p GSurvRequest_Future) Struct() (GSurvRequest, error) {
	s, err := p.Future.Struct()
	return GSurvRequest{s}, err
}

type GSurvResponse struct{ capnp.Struct }

// GSurvResponse_TypeID is the unique identifier for the type GSurvResponse.
const GSurvResponse_TypeID = 0x89fd196b0406b0c6

func NewGSurvResponse(s *capnp.Segment) (GSurvResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GSurvResponse{st}, err
}

func NewRootGSurvResponse(s *capnp.Segment) (GSurvResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GSurvResponse{st}, err
}

func ReadRootGSurvResponse(msg *capnp.Message) (GSurvResponse, error) {
	root, err := msg.Root()
	return GSurvResponse{root.Struct()}, err
}

func (s GSurvResponse) String() string {
	str, _ := text.Marshal(0x89fd196b0406b0c6, s.Struct)
	return str
}

func (s GSurvResponse) Namespace() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GSurvResponse) HasNamespace() bool {
	return s.Struct.HasPtr(0)
}

func (s GSurvResponse) NamespaceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GSurvResponse) SetNamespace(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GSurvResponse) Envelope() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s GSurvResponse) HasEnvelope() bool {
	return s.Struct.HasPtr(1)
}

func (s GSurvResponse) SetEnvelope(v []byte) error {
	return s.Struct.SetData(1, v)
}

// GSurvResponse_List is a list of GSurvResponse.
type GSurvResponse_List struct{ capnp.List }

// NewGSurvResponse creates a new list of GSurvResponse.
func NewGSurvResponse_List(s *capnp.Segment, sz int32) (GSurvResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return GSurvResponse_List{l}, err
}

func (s GSurvResponse_List) At(i int) GSurvResponse { return GSurvResponse{s.List.Struct(i)} }

func (s GSurvResponse_List) Set(i int, v GSurvResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s GSurvResponse_List) String() string {
	str, _ := text.MarshalList(0x89fd196b0406b0c6, s.List)
	return str
}

// GSurvResponse_Future is a wrapper for a GSurvResponse promised by a client call.
type GSurvResponse_Future struct{ *capnp.Future }

func (p GSurvResponse_Future) Struct() (GSurvResponse, error) {
	s, err := p.Future.Struct()
	return GSurvResponse{s}, err
}

type GSurvPacket struct{ capnp.Struct }
type GSurvPacket_Which uint16

const (
	GSurvPacket_Which_request  GSurvPacket_Which = 0
	GSurvPacket_Which_response GSurvPacket_Which = 1
)

func (w GSurvPacket_Which) String() string {
	const s = "requestresponse"
	switch w {
	case GSurvPacket_Which_request:
		return s[0:7]
	case GSurvPacket_Which_response:
		return s[7:15]

	}
	return "GSurvPacket_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GSurvPacket_TypeID is the unique identifier for the type GSurvPacket.
const GSurvPacket_TypeID = 0x982be7f87bcc1f63

func NewGSurvPacket(s *capnp.Segment) (GSurvPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GSurvPacket{st}, err
}

func NewRootGSurvPacket(s *capnp.Segment) (GSurvPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GSurvPacket{st}, err
}

func ReadRootGSurvPacket(msg *capnp.Message) (GSurvPacket, error) {
	root, err := msg.Root()
	return GSurvPacket{root.Struct()}, err
}

func (s GSurvPacket) String() string {
	str, _ := text.Marshal(0x982be7f87bcc1f63, s.Struct)
	return str
}

func (s GSurvPacket) Which() GSurvPacket_Which {
	return GSurvPacket_Which(s.Struct.Uint16(0))
}
func (s GSurvPacket) Request() (GSurvRequest, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return GSurvRequest{Struct: p.Struct()}, err
}

func (s GSurvPacket) HasRequest() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GSurvPacket) SetRequest(v GSurvRequest) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated GSurvRequest struct, preferring placement in s's segment.
func (s GSurvPacket) NewRequest() (GSurvRequest, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewGSurvRequest(s.Struct.Segment())
	if err != nil {
		return GSurvRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GSurvPacket) Response() (GSurvResponse, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return GSurvResponse{Struct: p.Struct()}, err
}

func (s GSurvPacket) HasResponse() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s GSurvPacket) SetResponse(v GSurvResponse) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated GSurvResponse struct, preferring placement in s's segment.
func (s GSurvPacket) NewResponse() (GSurvResponse, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewGSurvResponse(s.Struct.Segment())
	if err != nil {
		return GSurvResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// GSurvPacket_List is a list of GSurvPacket.
type GSurvPacket_List struct{ capnp.List }

// NewGSurvPacket creates a new list of GSurvPacket.
func NewGSurvPacket_List(s *capnp.Segment, sz int32) (GSurvPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return GSurvPacket_List{l}, err
}

func (s GSurvPacket_List) At(i int) GSurvPacket { return GSurvPacket{s.List.Struct(i)} }

func (s GSurvPacket_List) Set(i int, v GSurvPacket) error { return s.List.SetStruct(i, v.Struct) }

func (s GSurvPacket_List) String() string {
	str, _ := text.MarshalList(0x982be7f87bcc1f63, s.List)
	return str
}

// GSurvPacket_Future is a wrapper for a GSurvPacket promised by a client call.
type GSurvPacket_Future struct{ *capnp.Future }

func (p GSurvPacket_Future) Struct() (GSurvPacket, error) {
	s, err := p.Future.Struct()
	return GSurvPacket{s}, err
}

func (p GSurvPacket_Future) Request() GSurvRequest_Future {
	return GSurvRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p GSurvPacket_Future) Response() GSurvResponse_Future {
	return GSurvResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_ef83879a531f9bf3 = "x\xdat\x90\xbf\x8b\x13A\x1c\xc5\xdf\xfbN\xb2k\xb1" +
	"\xc1]\xf6\x1a\xc1#p(x\xe8\xe9\x9dX\x88X\x1c" +
	"\xc2\xe1\x0f,2w6\x82\xcd\xb2\x0e\x12\xa2\x9b\xcdN" +
	"\x12\x0b\x0b\x0b\x0bIi!\x88v\xfe\x03\xfaWX\xd9" +
	"X\xd9\xdb\x086\xa2\x82h\x11Gf\x13\x13\x11\xd3-" +
	";\x8f\xef\xe7}^\xfcnWv\x9a}\x01\xf4\xd1f" +
	"\xe0\xde\xbc\x0e\x1a\xbd#\xd3\x09\x92\x98\xee\xdb\x8b\xf6\xc1" +
	"\xf3\xc7\x8f>\xa3)!\x90\xae\xf3k\xbaI\xffu\x9c" +
	"\xf7A\x97\xb7\xdf>\xf8\xf1\xf1\xe43\xe8\x98\x7f\x85\xf7" +
	"\x18\x0a\x90N\xf8!}Z\xa7\x9f\xd4\xe9\x9b\xeb\x1b\xdf" +
	"_\x9e\x0d\xde\xff\x93\x9e\x9d\xfe\xc2O\xe9\xb4\x0e\xff\xe4" +
	"+l\xb9\xac\xec\x9e\xb9cG\x95\x8cO\xe7YY\x94" +
	"\x17.\x1f\x8c\xaa\xf1\xbe\xb1\xed\xb2_X\xd3!\xf5!" +
	"\xd5\x00\x1a\x04\x92\xcd}@\x9fP\xd4\xe7\x84\x09\xb9F" +
	"\xffs\xe7\x1a\xa0\xb7\x15\xf5E\xa1+\xb2{\xc6\x96Y" +
	"\x0e\x1aF\x10F\xa03\xc5\xd8\xdc\xed\x97\x06\x00[\x10" +
	"\xb6\xc0\x15\xd8N\x96\x87=3\x9cC#\xe7f\xd4K" +
	"\x80>\xa6\xa8\xb7\x85-\xfer3\xec\x96\xc7\x9eR\xd4" +
	"\xe7\x85\x0f+3\x18\x19;d\xbc\x94\x07\x19\x83\xae2" +
	"\xb6\x16\xf1\xf0x9\xfa\xfcu\x95\xfd\xe0\xb0?\xe7{" +
	"D\x0b\xf9\xbd\x0d@\xef*\xea\xeb\xc2?\xeeW}\x89" +
	"+\x8a\xfa\x860\x11\xaeQ\x80D\xfb\x95:\x8a\xfa\x96" +
	"0\xb4U\xbe\x90\xbe\xdd\xb5\xc3\xac\xc8\xeb.\x01\x84\x01" +
	"\xfe;\xd8\xef\x00\x00\x00\xff\xff\xac\x96\x88I"

func init() {
	schemas.Register(schema_ef83879a531f9bf3,
		0x89fd196b0406b0c6,
		0x982be7f87bcc1f63,
		0xd70632a2f6221d59)
}
