// Code generated by capnpc-go. DO NOT EDIT.

package casm

import (
	context "context"

	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
)

type Envelope struct{ capnp.Struct }

// Envelope_TypeID is the unique identifier for the type Envelope.
const Envelope_TypeID = 0xffaea28665fe6c28

func NewEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Envelope{st}, err
}

func NewRootEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Envelope{st}, err
}

func ReadRootEnvelope(msg *capnp.Message) (Envelope, error) {
	root, err := msg.Root()
	return Envelope{root.Struct()}, err
}

func (s Envelope) String() string {
	str, _ := text.Marshal(0xffaea28665fe6c28, s.Struct)
	return str
}

func (s Envelope) PublicKey() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Envelope) HasPublicKey() bool {
	return s.Struct.HasPtr(0)
}

func (s Envelope) SetPublicKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Envelope) PayloadType() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Envelope) HasPayloadType() bool {
	return s.Struct.HasPtr(1)
}

func (s Envelope) SetPayloadType(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Envelope) RawPayload() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Envelope) HasRawPayload() bool {
	return s.Struct.HasPtr(2)
}

func (s Envelope) SetRawPayload(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Envelope_List is a list of Envelope.
type Envelope_List struct{ capnp.List }

// NewEnvelope creates a new list of Envelope.
func NewEnvelope_List(s *capnp.Segment, sz int32) (Envelope_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Envelope_List{l}, err
}

func (s Envelope_List) At(i int) Envelope { return Envelope{s.List.Struct(i)} }

func (s Envelope_List) Set(i int, v Envelope) error { return s.List.SetStruct(i, v.Struct) }

func (s Envelope_List) String() string {
	str, _ := text.MarshalList(0xffaea28665fe6c28, s.List)
	return str
}

// Envelope_Future is a wrapper for a Envelope promised by a client call.
type Envelope_Future struct{ *capnp.Future }

func (p Envelope_Future) Struct() (Envelope, error) {
	s, err := p.Future.Struct()
	return Envelope{s}, err
}

type Scanner struct{ Client *capnp.Client }

// Scanner_TypeID is the unique identifier for the type Scanner.
const Scanner_TypeID = 0xe166568e5cdc7e8c

func (c Scanner) Scan(ctx context.Context, params func(Scanner_scan_Params) error) (Scanner_scan_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe166568e5cdc7e8c,
			MethodID:      0,
			InterfaceName: "casm.capnp:Scanner",
			MethodName:    "scan",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Scanner_scan_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Scanner_scan_Results_Future{Future: ans.Future()}, release
}

func (c Scanner) AddRef() Scanner {
	return Scanner{
		Client: c.Client.AddRef(),
	}
}

func (c Scanner) Release() {
	c.Client.Release()
}

// A Scanner_Server is a Scanner with a local implementation.
type Scanner_Server interface {
	Scan(context.Context, Scanner_scan) error
}

// Scanner_NewServer creates a new Server from an implementation of Scanner_Server.
func Scanner_NewServer(s Scanner_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Scanner_Methods(nil, s), s, c, policy)
}

// Scanner_ServerToClient creates a new Client from an implementation of Scanner_Server.
// The caller is responsible for calling Release on the returned Client.
func Scanner_ServerToClient(s Scanner_Server, policy *server.Policy) Scanner {
	return Scanner{Client: capnp.NewClient(Scanner_NewServer(s, policy))}
}

// Scanner_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Scanner_Methods(methods []server.Method, s Scanner_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe166568e5cdc7e8c,
			MethodID:      0,
			InterfaceName: "casm.capnp:Scanner",
			MethodName:    "scan",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Scan(ctx, Scanner_scan{call})
		},
	})

	return methods
}

// Scanner_scan holds the state for a server call to Scanner.scan.
// See server.Call for documentation.
type Scanner_scan struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Scanner_scan) Args() Scanner_scan_Params {
	return Scanner_scan_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Scanner_scan) AllocResults() (Scanner_scan_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Scanner_scan_Results{Struct: r}, err
}

type Scanner_scan_Params struct{ capnp.Struct }

// Scanner_scan_Params_TypeID is the unique identifier for the type Scanner_scan_Params.
const Scanner_scan_Params_TypeID = 0x8054edaab41a5654

func NewScanner_scan_Params(s *capnp.Segment) (Scanner_scan_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Scanner_scan_Params{st}, err
}

func NewRootScanner_scan_Params(s *capnp.Segment) (Scanner_scan_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Scanner_scan_Params{st}, err
}

func ReadRootScanner_scan_Params(msg *capnp.Message) (Scanner_scan_Params, error) {
	root, err := msg.Root()
	return Scanner_scan_Params{root.Struct()}, err
}

func (s Scanner_scan_Params) String() string {
	str, _ := text.Marshal(0x8054edaab41a5654, s.Struct)
	return str
}

func (s Scanner_scan_Params) Envelope() (Envelope, error) {
	p, err := s.Struct.Ptr(0)
	return Envelope{Struct: p.Struct()}, err
}

func (s Scanner_scan_Params) HasEnvelope() bool {
	return s.Struct.HasPtr(0)
}

func (s Scanner_scan_Params) SetEnvelope(v Envelope) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnvelope sets the envelope field to a newly
// allocated Envelope struct, preferring placement in s's segment.
func (s Scanner_scan_Params) NewEnvelope() (Envelope, error) {
	ss, err := NewEnvelope(s.Struct.Segment())
	if err != nil {
		return Envelope{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Scanner_scan_Params_List is a list of Scanner_scan_Params.
type Scanner_scan_Params_List struct{ capnp.List }

// NewScanner_scan_Params creates a new list of Scanner_scan_Params.
func NewScanner_scan_Params_List(s *capnp.Segment, sz int32) (Scanner_scan_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Scanner_scan_Params_List{l}, err
}

func (s Scanner_scan_Params_List) At(i int) Scanner_scan_Params {
	return Scanner_scan_Params{s.List.Struct(i)}
}

func (s Scanner_scan_Params_List) Set(i int, v Scanner_scan_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scanner_scan_Params_List) String() string {
	str, _ := text.MarshalList(0x8054edaab41a5654, s.List)
	return str
}

// Scanner_scan_Params_Future is a wrapper for a Scanner_scan_Params promised by a client call.
type Scanner_scan_Params_Future struct{ *capnp.Future }

func (p Scanner_scan_Params_Future) Struct() (Scanner_scan_Params, error) {
	s, err := p.Future.Struct()
	return Scanner_scan_Params{s}, err
}

func (p Scanner_scan_Params_Future) Envelope() Envelope_Future {
	return Envelope_Future{Future: p.Future.Field(0, nil)}
}

type Scanner_scan_Results struct{ capnp.Struct }

// Scanner_scan_Results_TypeID is the unique identifier for the type Scanner_scan_Results.
const Scanner_scan_Results_TypeID = 0xc876f81cc45d4bf1

func NewScanner_scan_Results(s *capnp.Segment) (Scanner_scan_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Scanner_scan_Results{st}, err
}

func NewRootScanner_scan_Results(s *capnp.Segment) (Scanner_scan_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Scanner_scan_Results{st}, err
}

func ReadRootScanner_scan_Results(msg *capnp.Message) (Scanner_scan_Results, error) {
	root, err := msg.Root()
	return Scanner_scan_Results{root.Struct()}, err
}

func (s Scanner_scan_Results) String() string {
	str, _ := text.Marshal(0xc876f81cc45d4bf1, s.Struct)
	return str
}

// Scanner_scan_Results_List is a list of Scanner_scan_Results.
type Scanner_scan_Results_List struct{ capnp.List }

// NewScanner_scan_Results creates a new list of Scanner_scan_Results.
func NewScanner_scan_Results_List(s *capnp.Segment, sz int32) (Scanner_scan_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Scanner_scan_Results_List{l}, err
}

func (s Scanner_scan_Results_List) At(i int) Scanner_scan_Results {
	return Scanner_scan_Results{s.List.Struct(i)}
}

func (s Scanner_scan_Results_List) Set(i int, v Scanner_scan_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Scanner_scan_Results_List) String() string {
	str, _ := text.MarshalList(0xc876f81cc45d4bf1, s.List)
	return str
}

// Scanner_scan_Results_Future is a wrapper for a Scanner_scan_Results promised by a client call.
type Scanner_scan_Results_Future struct{ *capnp.Future }

func (p Scanner_scan_Results_Future) Struct() (Scanner_scan_Results, error) {
	s, err := p.Future.Struct()
	return Scanner_scan_Results{s}, err
}

type Loader struct{ Client *capnp.Client }

// Loader_TypeID is the unique identifier for the type Loader.
const Loader_TypeID = 0xbf845148427d1697

func (c Loader) Load(ctx context.Context, params func(Loader_load_Params) error) (Loader_load_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf845148427d1697,
			MethodID:      0,
			InterfaceName: "casm.capnp:Loader",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Loader_load_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Loader_load_Results_Future{Future: ans.Future()}, release
}

func (c Loader) AddRef() Loader {
	return Loader{
		Client: c.Client.AddRef(),
	}
}

func (c Loader) Release() {
	c.Client.Release()
}

// A Loader_Server is a Loader with a local implementation.
type Loader_Server interface {
	Load(context.Context, Loader_load) error
}

// Loader_NewServer creates a new Server from an implementation of Loader_Server.
func Loader_NewServer(s Loader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Loader_Methods(nil, s), s, c, policy)
}

// Loader_ServerToClient creates a new Client from an implementation of Loader_Server.
// The caller is responsible for calling Release on the returned Client.
func Loader_ServerToClient(s Loader_Server, policy *server.Policy) Loader {
	return Loader{Client: capnp.NewClient(Loader_NewServer(s, policy))}
}

// Loader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Loader_Methods(methods []server.Method, s Loader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf845148427d1697,
			MethodID:      0,
			InterfaceName: "casm.capnp:Loader",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Loader_load{call})
		},
	})

	return methods
}

// Loader_load holds the state for a server call to Loader.load.
// See server.Call for documentation.
type Loader_load struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Loader_load) Args() Loader_load_Params {
	return Loader_load_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Loader_load) AllocResults() (Loader_load_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{Struct: r}, err
}

type Loader_load_Params struct{ capnp.Struct }

// Loader_load_Params_TypeID is the unique identifier for the type Loader_load_Params.
const Loader_load_Params_TypeID = 0xcc8403c880ffc9ca

func NewLoader_load_Params(s *capnp.Segment) (Loader_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Loader_load_Params{st}, err
}

func NewRootLoader_load_Params(s *capnp.Segment) (Loader_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Loader_load_Params{st}, err
}

func ReadRootLoader_load_Params(msg *capnp.Message) (Loader_load_Params, error) {
	root, err := msg.Root()
	return Loader_load_Params{root.Struct()}, err
}

func (s Loader_load_Params) String() string {
	str, _ := text.Marshal(0xcc8403c880ffc9ca, s.Struct)
	return str
}

// Loader_load_Params_List is a list of Loader_load_Params.
type Loader_load_Params_List struct{ capnp.List }

// NewLoader_load_Params creates a new list of Loader_load_Params.
func NewLoader_load_Params_List(s *capnp.Segment, sz int32) (Loader_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Loader_load_Params_List{l}, err
}

func (s Loader_load_Params_List) At(i int) Loader_load_Params {
	return Loader_load_Params{s.List.Struct(i)}
}

func (s Loader_load_Params_List) Set(i int, v Loader_load_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Loader_load_Params_List) String() string {
	str, _ := text.MarshalList(0xcc8403c880ffc9ca, s.List)
	return str
}

// Loader_load_Params_Future is a wrapper for a Loader_load_Params promised by a client call.
type Loader_load_Params_Future struct{ *capnp.Future }

func (p Loader_load_Params_Future) Struct() (Loader_load_Params, error) {
	s, err := p.Future.Struct()
	return Loader_load_Params{s}, err
}

type Loader_load_Results struct{ capnp.Struct }

// Loader_load_Results_TypeID is the unique identifier for the type Loader_load_Results.
const Loader_load_Results_TypeID = 0x8a58844617d96a9d

func NewLoader_load_Results(s *capnp.Segment) (Loader_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{st}, err
}

func NewRootLoader_load_Results(s *capnp.Segment) (Loader_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{st}, err
}

func ReadRootLoader_load_Results(msg *capnp.Message) (Loader_load_Results, error) {
	root, err := msg.Root()
	return Loader_load_Results{root.Struct()}, err
}

func (s Loader_load_Results) String() string {
	str, _ := text.Marshal(0x8a58844617d96a9d, s.Struct)
	return str
}

func (s Loader_load_Results) Envelope() (Envelope, error) {
	p, err := s.Struct.Ptr(0)
	return Envelope{Struct: p.Struct()}, err
}

func (s Loader_load_Results) HasEnvelope() bool {
	return s.Struct.HasPtr(0)
}

func (s Loader_load_Results) SetEnvelope(v Envelope) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnvelope sets the envelope field to a newly
// allocated Envelope struct, preferring placement in s's segment.
func (s Loader_load_Results) NewEnvelope() (Envelope, error) {
	ss, err := NewEnvelope(s.Struct.Segment())
	if err != nil {
		return Envelope{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Loader_load_Results_List is a list of Loader_load_Results.
type Loader_load_Results_List struct{ capnp.List }

// NewLoader_load_Results creates a new list of Loader_load_Results.
func NewLoader_load_Results_List(s *capnp.Segment, sz int32) (Loader_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Loader_load_Results_List{l}, err
}

func (s Loader_load_Results_List) At(i int) Loader_load_Results {
	return Loader_load_Results{s.List.Struct(i)}
}

func (s Loader_load_Results_List) Set(i int, v Loader_load_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Loader_load_Results_List) String() string {
	str, _ := text.MarshalList(0x8a58844617d96a9d, s.List)
	return str
}

// Loader_load_Results_Future is a wrapper for a Loader_load_Results promised by a client call.
type Loader_load_Results_Future struct{ *capnp.Future }

func (p Loader_load_Results_Future) Struct() (Loader_load_Results, error) {
	s, err := p.Future.Struct()
	return Loader_load_Results{s}, err
}

func (p Loader_load_Results_Future) Envelope() Envelope_Future {
	return Envelope_Future{Future: p.Future.Field(0, nil)}
}

const schema_8649a65772a7be4a = "x\xda\xa4\x92\xbfk\x14A\x1c\xc5\xdf\x9b\xd9\xcd\x15\xc9" +
	"a\xc6MTD\x11!\x82\x88\x1e\x06;\x9b\x0bb\x8c" +
	"\xf9!\xec\x9cg\x0c\xa2\xe0\xe6n\x04\xe5r\xb7\xec\x99" +
	"\xc8\x15J\x8a#\x85\x88\x85\x8d \xd8\xa4P\xb0\xd0\xc6" +
	"Z\x1b\x8b(\x8aX\x0a6\xfe\x01\x16\x0a\x82\x11td" +
	"\xf6\xd8;/\x96v\xcb\xf7\xbd\xfd\xbc7\xdf\x99\xa3\x1e" +
	"'\xc4\xb8\xff^\x02\xfa\xb0?`\xcb\xf3\xbb\x9f?\xf9" +
	"R^\x85\x0a\x08\xf8\xcc\x01\xc1;\xfe\x04\x83\x0f,\x82" +
	"\xf6\xe1\xb5\x8f;O\xb5\x17nCm\xef\xea\xdfS}" +
	"3\xd5\xef\xef\xb8y\xe2\xb4n\xbf\x84\x1a\x94v\xe6\xc5" +
	"\xe3\xe4\xfc\xa3\xe95\x80\xc1^q/8 \x9c}\xbf" +
	"\x98\x0a\xa6\xdd\x97\xfd:{\xe9\xd5\x9e\x1f+\x1b\x9d0" +
	"/\x07\x1c\x1b\x17\x82\xf0\xec\x9b\xd7vuC\xb6\xdfv" +
	"b\x9c\x12\x8c\x8ao\xf0\xec\x9d[\x9f.\xde\x9d\xbf\xf2" +
	"\xf9\x1f\xfe&\x1f\x04L\xf9\xbf8\xd5I\xb2\x07k\xbf" +
	"\xcd\xda\xfaS\x0b5\xc8\x9e\xd9\x97\xce\x95\x17\xeb\xc1h" +
	"\xeaW\xe2\x19\x8e\xd8J\xd4\\*T\xa2X\xd4\xe3\xe3" +
	"g+Q\xbdn\x92B\xb3\x12\xd5\xc7\x8aa\x94DK" +
	"M\xedI\x0f\xf0\x08\xa8\xfc\x0c\xa0\x87$\xf5.Ak" +
	"\xea+\xa6\xd6\x88\x0d\x00\x0e\xf7\x12A\x0e\x83}\xd4\xb9" +
	"FT5I\xa1\xd6\x88\xaac\xa5\xa2i.\xd7\xae\xff" +
	"'\x95\x19\x95IHjO\xfa@wu\xcc\xaeJ\xa9" +
	"C\x10\xca\xcfms\xc9\x13\x0c\xd9\x03\x0cl=l\xa9" +
	"S\x0b\x99aK\xedp_\xba\x8b\xbe\x02\xe9\xff\xd2\xfc" +
	"\xd5 {C\xcc\xee\xb7\xdb\xc0e\xf47p\x84Iw" +
	"\xd8\\#6\x0e1\xd4]\xc8d\x09\xd0'%u(" +
	"\xa8\xc8\x11\xba\xe1\x99E@\xcfI\xea\x05A%\xc4\x08" +
	"\x05\xa0\xce]\x00tYR_\x16\xb4\xf1\xf2b\xedj" +
	"e\xd6\x80-\xe6!\x98\x07m\x1c\xb5\\\xff2r\xad" +
	"\xd8t\xa7It#t\x02dT\xcd\x86\x7f\x02\x00\x00" +
	"\xff\xff\\\xdb\xd7?"

func init() {
	schemas.Register(schema_8649a65772a7be4a,
		0x8054edaab41a5654,
		0x8a58844617d96a9d,
		0xbf845148427d1697,
		0xc876f81cc45d4bf1,
		0xcc8403c880ffc9ca,
		0xe166568e5cdc7e8c,
		0xffaea28665fe6c28)
}
