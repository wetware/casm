// Code generated by capnpc-go. DO NOT EDIT.

package routing

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Heartbeat capnp.Struct

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0x83bca0e4d70e0e82

func NewHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Heartbeat(st), err
}

func NewRootHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Heartbeat(st), err
}

func ReadRootHeartbeat(msg *capnp.Message) (Heartbeat, error) {
	root, err := msg.Root()
	return Heartbeat(root.Struct()), err
}

func (s Heartbeat) String() string {
	str, _ := text.Marshal(0x83bca0e4d70e0e82, capnp.Struct(s))
	return str
}

func (s Heartbeat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Heartbeat) DecodeFromPtr(p capnp.Ptr) Heartbeat {
	return Heartbeat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Heartbeat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Heartbeat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Heartbeat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Heartbeat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Heartbeat) Ttl() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Heartbeat) SetTtl(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Heartbeat) Instance() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Heartbeat) SetInstance(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Heartbeat) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Heartbeat) HasHost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Heartbeat) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Heartbeat) SetHost(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Heartbeat) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Heartbeat) HasMeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Heartbeat) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Heartbeat) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Heartbeat_List is a list of Heartbeat.
type Heartbeat_List = capnp.StructList[Heartbeat]

// NewHeartbeat creates a new list of Heartbeat.
func NewHeartbeat_List(s *capnp.Segment, sz int32) (Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Heartbeat](l), err
}

// Heartbeat_Future is a wrapper for a Heartbeat promised by a client call.
type Heartbeat_Future struct{ *capnp.Future }

func (p Heartbeat_Future) Struct() (Heartbeat, error) {
	s, err := p.Future.Struct()
	return Heartbeat(s), err
}

const schema_c2974e3dc137fcee = "x\xda4\xc81J\x03A\x14\x06\xe0\xff\x7f\xb31)" +
	"\xe2$\x03{\x02KA\xc1J\x10\x04K\xb1\x90\xbc\xde" +
	"f\x8c\x83\x1bH6k\xf2\xbc\x80i\xbc\x81\xad\x07\x11" +
	"\xc4\x05\x0b\x0bk/ \xd8y\x02ad\x05\xab\x0f\xbe" +
	"\xf1\xe6\xa48\xd8~&D\xcb\xdeV\xbe\xf3\xfe\xe3\xf3" +
	"\xf1i\x03\xf5d\xfe\xfe9|9>\x7fh\xd1\x93>" +
	"\x10^\xdb\xf0\xde\xf9\xf6\x85\xbd\xbcZ\xde\xda\xac\xbe\xde" +
	"\x97il\xea\xe6\xe84\xc5\x95]\xa6h\x98\x90:v" +
	"\x05P\x10\x08q\x07\xd0\x0bG\xad\x84\x81,\xd9e:" +
	"\x03\xf4\xcaQ\x1b!\xa5\xa4\x00a\xb1\x0bh\xe5\xa8&" +
	"\x0c\x8e%\x1d\x10n\xba\x9c;\xea\xbd\xb0o6\xe7\x00" +
	"\xc2\x01\x98g\xf5\xdab=M\x00\xfeoT-\xd7\xc6" +
	"!\x84Cp\xb4H\x16\xe9\xc1\x89\xe3\xdfy\xf07\x00" +
	"\x00\xff\xff\xe5\x9d0\x10"

func init() {
	schemas.Register(schema_c2974e3dc137fcee,
		0x83bca0e4d70e0e82)
}
