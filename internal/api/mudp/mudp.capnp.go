// Code generated by capnpc-go. DO NOT EDIT.

package mudp

import (
	strconv "strconv"

	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type MudpRequest struct{ capnp.Struct }

// MudpRequest_TypeID is the unique identifier for the type MudpRequest.
const MudpRequest_TypeID = 0xfd0cdac648e8286b

func NewMudpRequest(s *capnp.Segment) (MudpRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MudpRequest{st}, err
}

func NewRootMudpRequest(s *capnp.Segment) (MudpRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MudpRequest{st}, err
}

func ReadRootMudpRequest(msg *capnp.Message) (MudpRequest, error) {
	root, err := msg.Root()
	return MudpRequest{root.Struct()}, err
}

func (s MudpRequest) String() string {
	str, _ := text.Marshal(0xfd0cdac648e8286b, s.Struct)
	return str
}

func (s MudpRequest) Src() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MudpRequest) HasSrc() bool {
	return s.Struct.HasPtr(0)
}

func (s MudpRequest) SetSrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MudpRequest) Distance() uint8 {
	return s.Struct.Uint8(0)
}

func (s MudpRequest) SetDistance(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s MudpRequest) Namespace() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s MudpRequest) HasNamespace() bool {
	return s.Struct.HasPtr(1)
}

func (s MudpRequest) NamespaceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s MudpRequest) SetNamespace(v string) error {
	return s.Struct.SetText(1, v)
}

// MudpRequest_List is a list of MudpRequest.
type MudpRequest_List struct{ capnp.List }

// NewMudpRequest creates a new list of MudpRequest.
func NewMudpRequest_List(s *capnp.Segment, sz int32) (MudpRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return MudpRequest_List{l}, err
}

func (s MudpRequest_List) At(i int) MudpRequest { return MudpRequest{s.List.Struct(i)} }

func (s MudpRequest_List) Set(i int, v MudpRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpRequest_List) String() string {
	str, _ := text.MarshalList(0xfd0cdac648e8286b, s.List)
	return str
}

// MudpRequest_Future is a wrapper for a MudpRequest promised by a client call.
type MudpRequest_Future struct{ *capnp.Future }

func (p MudpRequest_Future) Struct() (MudpRequest, error) {
	s, err := p.Future.Struct()
	return MudpRequest{s}, err
}

type MudpResponse struct{ capnp.Struct }

// MudpResponse_TypeID is the unique identifier for the type MudpResponse.
const MudpResponse_TypeID = 0x933e53369a6293b3

func NewMudpResponse(s *capnp.Segment) (MudpResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MudpResponse{st}, err
}

func NewRootMudpResponse(s *capnp.Segment) (MudpResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MudpResponse{st}, err
}

func ReadRootMudpResponse(msg *capnp.Message) (MudpResponse, error) {
	root, err := msg.Root()
	return MudpResponse{root.Struct()}, err
}

func (s MudpResponse) String() string {
	str, _ := text.Marshal(0x933e53369a6293b3, s.Struct)
	return str
}

func (s MudpResponse) Namespace() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MudpResponse) HasNamespace() bool {
	return s.Struct.HasPtr(0)
}

func (s MudpResponse) NamespaceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MudpResponse) SetNamespace(v string) error {
	return s.Struct.SetText(0, v)
}

func (s MudpResponse) Envelopes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s MudpResponse) HasEnvelopes() bool {
	return s.Struct.HasPtr(1)
}

func (s MudpResponse) SetEnvelopes(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewEnvelopes sets the envelopes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s MudpResponse) NewEnvelopes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// MudpResponse_List is a list of MudpResponse.
type MudpResponse_List struct{ capnp.List }

// NewMudpResponse creates a new list of MudpResponse.
func NewMudpResponse_List(s *capnp.Segment, sz int32) (MudpResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return MudpResponse_List{l}, err
}

func (s MudpResponse_List) At(i int) MudpResponse { return MudpResponse{s.List.Struct(i)} }

func (s MudpResponse_List) Set(i int, v MudpResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpResponse_List) String() string {
	str, _ := text.MarshalList(0x933e53369a6293b3, s.List)
	return str
}

// MudpResponse_Future is a wrapper for a MudpResponse promised by a client call.
type MudpResponse_Future struct{ *capnp.Future }

func (p MudpResponse_Future) Struct() (MudpResponse, error) {
	s, err := p.Future.Struct()
	return MudpResponse{s}, err
}

type MudpPacket struct{ capnp.Struct }
type MudpPacket_Which uint16

const (
	MudpPacket_Which_request  MudpPacket_Which = 0
	MudpPacket_Which_response MudpPacket_Which = 1
)

func (w MudpPacket_Which) String() string {
	const s = "requestresponse"
	switch w {
	case MudpPacket_Which_request:
		return s[0:7]
	case MudpPacket_Which_response:
		return s[7:15]

	}
	return "MudpPacket_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MudpPacket_TypeID is the unique identifier for the type MudpPacket.
const MudpPacket_TypeID = 0xf3610b67cd26c199

func NewMudpPacket(s *capnp.Segment) (MudpPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MudpPacket{st}, err
}

func NewRootMudpPacket(s *capnp.Segment) (MudpPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MudpPacket{st}, err
}

func ReadRootMudpPacket(msg *capnp.Message) (MudpPacket, error) {
	root, err := msg.Root()
	return MudpPacket{root.Struct()}, err
}

func (s MudpPacket) String() string {
	str, _ := text.Marshal(0xf3610b67cd26c199, s.Struct)
	return str
}

func (s MudpPacket) Which() MudpPacket_Which {
	return MudpPacket_Which(s.Struct.Uint16(0))
}
func (s MudpPacket) Request() (MudpRequest, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return MudpRequest{Struct: p.Struct()}, err
}

func (s MudpPacket) HasRequest() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MudpPacket) SetRequest(v MudpRequest) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated MudpRequest struct, preferring placement in s's segment.
func (s MudpPacket) NewRequest() (MudpRequest, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewMudpRequest(s.Struct.Segment())
	if err != nil {
		return MudpRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MudpPacket) Response() (MudpResponse, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return MudpResponse{Struct: p.Struct()}, err
}

func (s MudpPacket) HasResponse() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MudpPacket) SetResponse(v MudpResponse) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated MudpResponse struct, preferring placement in s's segment.
func (s MudpPacket) NewResponse() (MudpResponse, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewMudpResponse(s.Struct.Segment())
	if err != nil {
		return MudpResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MudpPacket_List is a list of MudpPacket.
type MudpPacket_List struct{ capnp.List }

// NewMudpPacket creates a new list of MudpPacket.
func NewMudpPacket_List(s *capnp.Segment, sz int32) (MudpPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MudpPacket_List{l}, err
}

func (s MudpPacket_List) At(i int) MudpPacket { return MudpPacket{s.List.Struct(i)} }

func (s MudpPacket_List) Set(i int, v MudpPacket) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpPacket_List) String() string {
	str, _ := text.MarshalList(0xf3610b67cd26c199, s.List)
	return str
}

// MudpPacket_Future is a wrapper for a MudpPacket promised by a client call.
type MudpPacket_Future struct{ *capnp.Future }

func (p MudpPacket_Future) Struct() (MudpPacket, error) {
	s, err := p.Future.Struct()
	return MudpPacket{s}, err
}

func (p MudpPacket_Future) Request() MudpRequest_Future {
	return MudpRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p MudpPacket_Future) Response() MudpResponse_Future {
	return MudpResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_ef83879a531f9bf3 = "x\xdal\x901k\x14A\x1c\xc5\xdf\xfbO\xeeVq" +
	"\xd7\xec\xb2)\x15AT\x120\x9a\x80\x88XH\x10\x02" +
	"Q\x14v\x12K\x9buo\x90\x10\xb37\xb9\xb9\xd5\xd2" +
	"\xc2\xc2\x0fp\xd5\x9d\x95\x85\xb5\x85\x9f\xc0\xc6\xceF\xb0" +
	"\xb9\xd2\xca\xce\xe2j\x1d\xd9\xdd\xd3\x13\xb9\xee\xf1\x9f\xc7" +
	"\xbc\xf7{\xf1\xd7\x1d\xd9\xee\xf4\x05\xd0\xe7:]\xffa" +
	"\xf4dr\xf3\xe0\xce\x08\xc9*\xfd\xec\xcd\x85\x83\xc9\xeb" +
	"W?\xd0\x91\x00H\xcf\xf3[\xba\xc1Z]\xe6\x0b\xd0" +
	"\x8f?^\xf9\xfc\xf4L>\x83^\xe5?\xe6]\x06\x02" +
	"\xa4c~I\xdf5\xee\xb7\x8d\xfbh\xfd\xfb\xde\xa7i" +
	"\xf8\xf3?w\xfb5e\x9aF\x8d:-\xef\xb1\xe9s" +
	"{x\xfd\xb8\xeaY\xb9V\xe4\xb6\xb4\xb7\x1fV=\xbb" +
	"o\x9c\xed\x07\xa53\x19\xa9O\xa9\x15`\x85@\xb2\xb1" +
	"\x0f\xe8uE}C\x98\x90k\xac\x8f\xdb\xf5qKQ" +
	"?\x10\xfa2?6\xce\xe6\x05h\x18B\x18\x82\xde\x94" +
	"\xcf\xcd\xb3\xbe5\xa0\xe3Y0Sd\x04\xa9\xe5\xd2\xec" +
	",/\x8e\x0c\x87\xf3\xe4\xd0\xfb6\xfa.\xa0/)\xea" +
	"-a\xc4_\xbe\xcd\xde\xbc\x0f\xe8\xab\x8a\xfa\x96\xf0\xe5" +
	"\xc0\x9cT\xc6\x0d\x19/\xf8A\xc6\xa0\x1f\xd48\xa53" +
	"\x00\x18/v\x9f\xbf.\x1f\xe0\xa42\xca5-\xc2\xbf" +
	"\xfc\xbb\x17\x01\xbd\xd3\xa2\xfe\xc1\xbfWW\xd8S\xd4\x8f" +
	"\x84\x89p\x8d\x02$\xba\xde$S\xd4\x8f\x85\x81\x1b\x14" +
	"\x0dp\x04\xfa\xde\xa1\x1b\xe6e\xd14\xe9B\xd8\xc5\xd2" +
	"\xcd~\x07\x00\x00\xff\xff\xd5@\x85\xc4"

func init() {
	schemas.Register(schema_ef83879a531f9bf3,
		0x933e53369a6293b3,
		0xf3610b67cd26c199,
		0xfd0cdac648e8286b)
}
