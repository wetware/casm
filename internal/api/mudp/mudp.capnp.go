// Code generated by capnpc-go. DO NOT EDIT.

package mudp

import (
	strconv "strconv"

	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type MudpRequest struct{ capnp.Struct }

// MudpRequest_TypeID is the unique identifier for the type MudpRequest.
const MudpRequest_TypeID = 0xfd0cdac648e8286b

func NewMudpRequest(s *capnp.Segment) (MudpRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MudpRequest{st}, err
}

func NewRootMudpRequest(s *capnp.Segment) (MudpRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MudpRequest{st}, err
}

func ReadRootMudpRequest(msg *capnp.Message) (MudpRequest, error) {
	root, err := msg.Root()
	return MudpRequest{root.Struct()}, err
}

func (s MudpRequest) String() string {
	str, _ := text.Marshal(0xfd0cdac648e8286b, s.Struct)
	return str
}

func (s MudpRequest) Peer() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MudpRequest) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s MudpRequest) SetPeer(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MudpRequest) Distance() uint8 {
	return s.Struct.Uint8(0)
}

func (s MudpRequest) SetDistance(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s MudpRequest) Namespace() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s MudpRequest) HasNamespace() bool {
	return s.Struct.HasPtr(1)
}

func (s MudpRequest) NamespaceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s MudpRequest) SetNamespace(v string) error {
	return s.Struct.SetText(1, v)
}

// MudpRequest_List is a list of MudpRequest.
type MudpRequest_List struct{ capnp.List }

// NewMudpRequest creates a new list of MudpRequest.
func NewMudpRequest_List(s *capnp.Segment, sz int32) (MudpRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return MudpRequest_List{l}, err
}

func (s MudpRequest_List) At(i int) MudpRequest { return MudpRequest{s.List.Struct(i)} }

func (s MudpRequest_List) Set(i int, v MudpRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpRequest_List) String() string {
	str, _ := text.MarshalList(0xfd0cdac648e8286b, s.List)
	return str
}

// MudpRequest_Future is a wrapper for a MudpRequest promised by a client call.
type MudpRequest_Future struct{ *capnp.Future }

func (p MudpRequest_Future) Struct() (MudpRequest, error) {
	s, err := p.Future.Struct()
	return MudpRequest{s}, err
}

type MudpResponse struct{ capnp.Struct }

// MudpResponse_TypeID is the unique identifier for the type MudpResponse.
const MudpResponse_TypeID = 0x933e53369a6293b3

func NewMudpResponse(s *capnp.Segment) (MudpResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MudpResponse{st}, err
}

func NewRootMudpResponse(s *capnp.Segment) (MudpResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MudpResponse{st}, err
}

func ReadRootMudpResponse(msg *capnp.Message) (MudpResponse, error) {
	root, err := msg.Root()
	return MudpResponse{root.Struct()}, err
}

func (s MudpResponse) String() string {
	str, _ := text.Marshal(0x933e53369a6293b3, s.Struct)
	return str
}

func (s MudpResponse) Namespace() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MudpResponse) HasNamespace() bool {
	return s.Struct.HasPtr(0)
}

func (s MudpResponse) NamespaceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MudpResponse) SetNamespace(v string) error {
	return s.Struct.SetText(0, v)
}

func (s MudpResponse) Envelopes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s MudpResponse) HasEnvelopes() bool {
	return s.Struct.HasPtr(1)
}

func (s MudpResponse) SetEnvelopes(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewEnvelopes sets the envelopes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s MudpResponse) NewEnvelopes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// MudpResponse_List is a list of MudpResponse.
type MudpResponse_List struct{ capnp.List }

// NewMudpResponse creates a new list of MudpResponse.
func NewMudpResponse_List(s *capnp.Segment, sz int32) (MudpResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return MudpResponse_List{l}, err
}

func (s MudpResponse_List) At(i int) MudpResponse { return MudpResponse{s.List.Struct(i)} }

func (s MudpResponse_List) Set(i int, v MudpResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpResponse_List) String() string {
	str, _ := text.MarshalList(0x933e53369a6293b3, s.List)
	return str
}

// MudpResponse_Future is a wrapper for a MudpResponse promised by a client call.
type MudpResponse_Future struct{ *capnp.Future }

func (p MudpResponse_Future) Struct() (MudpResponse, error) {
	s, err := p.Future.Struct()
	return MudpResponse{s}, err
}

type MudpPacket struct{ capnp.Struct }
type MudpPacket_Which uint16

const (
	MudpPacket_Which_request  MudpPacket_Which = 0
	MudpPacket_Which_response MudpPacket_Which = 1
)

func (w MudpPacket_Which) String() string {
	const s = "requestresponse"
	switch w {
	case MudpPacket_Which_request:
		return s[0:7]
	case MudpPacket_Which_response:
		return s[7:15]

	}
	return "MudpPacket_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MudpPacket_TypeID is the unique identifier for the type MudpPacket.
const MudpPacket_TypeID = 0xf3610b67cd26c199

func NewMudpPacket(s *capnp.Segment) (MudpPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MudpPacket{st}, err
}

func NewRootMudpPacket(s *capnp.Segment) (MudpPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MudpPacket{st}, err
}

func ReadRootMudpPacket(msg *capnp.Message) (MudpPacket, error) {
	root, err := msg.Root()
	return MudpPacket{root.Struct()}, err
}

func (s MudpPacket) String() string {
	str, _ := text.Marshal(0xf3610b67cd26c199, s.Struct)
	return str
}

func (s MudpPacket) Which() MudpPacket_Which {
	return MudpPacket_Which(s.Struct.Uint16(0))
}
func (s MudpPacket) Request() (MudpRequest, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return MudpRequest{Struct: p.Struct()}, err
}

func (s MudpPacket) HasRequest() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MudpPacket) SetRequest(v MudpRequest) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated MudpRequest struct, preferring placement in s's segment.
func (s MudpPacket) NewRequest() (MudpRequest, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewMudpRequest(s.Struct.Segment())
	if err != nil {
		return MudpRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MudpPacket) Response() (MudpResponse, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return MudpResponse{Struct: p.Struct()}, err
}

func (s MudpPacket) HasResponse() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MudpPacket) SetResponse(v MudpResponse) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated MudpResponse struct, preferring placement in s's segment.
func (s MudpPacket) NewResponse() (MudpResponse, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewMudpResponse(s.Struct.Segment())
	if err != nil {
		return MudpResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MudpPacket_List is a list of MudpPacket.
type MudpPacket_List struct{ capnp.List }

// NewMudpPacket creates a new list of MudpPacket.
func NewMudpPacket_List(s *capnp.Segment, sz int32) (MudpPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MudpPacket_List{l}, err
}

func (s MudpPacket_List) At(i int) MudpPacket { return MudpPacket{s.List.Struct(i)} }

func (s MudpPacket_List) Set(i int, v MudpPacket) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpPacket_List) String() string {
	str, _ := text.MarshalList(0xf3610b67cd26c199, s.List)
	return str
}

// MudpPacket_Future is a wrapper for a MudpPacket promised by a client call.
type MudpPacket_Future struct{ *capnp.Future }

func (p MudpPacket_Future) Struct() (MudpPacket, error) {
	s, err := p.Future.Struct()
	return MudpPacket{s}, err
}

func (p MudpPacket_Future) Request() MudpRequest_Future {
	return MudpRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p MudpPacket_Future) Response() MudpResponse_Future {
	return MudpResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_ef83879a531f9bf3 = "x\xdal\x901\x8b\x13A\x1c\xc5\xdf\xfb\xcf%Q\xdc" +
	"5\xbb\xec\x95\x8a\x8d\xca\x9dxz\x07\"b!\x87p" +
	"p\x8a\xc2\xce\x9d\xa5\xcd\xba\x19\xe48o3\xc9d\xb5" +
	"\xb4\xb0\xf0\x03\xa4J\xac,\xac-\xfc\x046v6\x82" +
	"MJ+;\x8b\xd4:\xb2\xbb\xd1\x88\xa4{\xfc\xe71" +
	"\xef\xfd^\xf4uWvZ}\x01\xf4\xb9V\xdb\x7f\x18" +
	"?\x99\xde<\xbc3F\xdc\xa5\x9f\xbf\xb9p8}\xfd" +
	"\xea\x07Z\xd2\x01\x92\xf3\xfc\x96l\xb2R\x97\xf8\x02\xf4" +
	"\x93\x8f\x97??=\x93\xcd\xa1\xbb\xfc\xc7\xbc\xc7\x8e\x00" +
	"\xc9\x84_\x92w\xb5\xfbm\xed>\xde\xf8\xbe\xffi\x16" +
	"\xfc\xfc\xcf\xdd|M\x99%a\xadN\xcb{l\xf9\xcc" +
	"\x1e]?){V\xae\xe5\x99-\xec\xed\x87e\xcf\x1e" +
	"\x18g\xfb\x9d\xc2\x99\x94\xd4\xa7\xd4\x1a\xb0F \xde<" +
	"\x00\xf4\x86\xa2\xbe!\x8c\xc9uV\xc7\x9d\xea\xb8\xad\xa8" +
	"\x1f\x08}\x91\x9d\x18g\xb3\x1c4\x0c \x0c@o\x8a" +
	"\xe7\xe6Y\xdf\x1a\xd0\xf1,\x98*2\x84Trev" +
	"\x9a\xe5\xc7\x86\xa3Er\xe0}\x13}\x17\xd0\x17\x15\xf5" +
	"\xb60\xe4/\xdfdo\xdd\x07\xf4UE}K\xf8r" +
	"h\x06\xa5q#FK~\x90\x11\xe8\x87\x15N\xe1\x0c" +
	"\x00F\xcb\xdd\x17\xaf\xab\x07\x18\x94F\xb9\xbaE\xf0\x97" +
	"\x7f\xef\x0a\xa0w\x1b\xd4?\xf8\xf7\xaa\x0a\xfb\x8a\xfa\x91" +
	"0\x16\xaeS\x80XW\x9b\xa4\x8a\xfa\xb1\xb0k\x8d\x19" +
	"\xd6\xc4!\xe8{Gn\x94\x15y]\xa5\x0da\x1b+" +
	"G\xfb\x1d\x00\x00\xff\xffi\xc2\x868"

func init() {
	schemas.Register(schema_ef83879a531f9bf3,
		0x933e53369a6293b3,
		0xf3610b67cd26c199,
		0xfd0cdac648e8286b)
}
