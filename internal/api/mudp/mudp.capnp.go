// Code generated by capnpc-go. DO NOT EDIT.

package mudp

import (
	strconv "strconv"

	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type MudpRequest struct{ capnp.Struct }

// MudpRequest_TypeID is the unique identifier for the type MudpRequest.
const MudpRequest_TypeID = 0xfd0cdac648e8286b

func NewMudpRequest(s *capnp.Segment) (MudpRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MudpRequest{st}, err
}

func NewRootMudpRequest(s *capnp.Segment) (MudpRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MudpRequest{st}, err
}

func ReadRootMudpRequest(msg *capnp.Message) (MudpRequest, error) {
	root, err := msg.Root()
	return MudpRequest{root.Struct()}, err
}

func (s MudpRequest) String() string {
	str, _ := text.Marshal(0xfd0cdac648e8286b, s.Struct)
	return str
}

func (s MudpRequest) Src() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MudpRequest) HasSrc() bool {
	return s.Struct.HasPtr(0)
}

func (s MudpRequest) SetSrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MudpRequest) Distance() uint8 {
	return s.Struct.Uint8(0)
}

func (s MudpRequest) SetDistance(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s MudpRequest) Namespace() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s MudpRequest) HasNamespace() bool {
	return s.Struct.HasPtr(1)
}

func (s MudpRequest) NamespaceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s MudpRequest) SetNamespace(v string) error {
	return s.Struct.SetText(1, v)
}

// MudpRequest_List is a list of MudpRequest.
type MudpRequest_List struct{ capnp.List }

// NewMudpRequest creates a new list of MudpRequest.
func NewMudpRequest_List(s *capnp.Segment, sz int32) (MudpRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return MudpRequest_List{l}, err
}

func (s MudpRequest_List) At(i int) MudpRequest { return MudpRequest{s.List.Struct(i)} }

func (s MudpRequest_List) Set(i int, v MudpRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpRequest_List) String() string {
	str, _ := text.MarshalList(0xfd0cdac648e8286b, s.List)
	return str
}

// MudpRequest_Future is a wrapper for a MudpRequest promised by a client call.
type MudpRequest_Future struct{ *capnp.Future }

func (p MudpRequest_Future) Struct() (MudpRequest, error) {
	s, err := p.Future.Struct()
	return MudpRequest{s}, err
}

type MudpResponse struct{ capnp.Struct }

// MudpResponse_TypeID is the unique identifier for the type MudpResponse.
const MudpResponse_TypeID = 0x933e53369a6293b3

func NewMudpResponse(s *capnp.Segment) (MudpResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MudpResponse{st}, err
}

func NewRootMudpResponse(s *capnp.Segment) (MudpResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MudpResponse{st}, err
}

func ReadRootMudpResponse(msg *capnp.Message) (MudpResponse, error) {
	root, err := msg.Root()
	return MudpResponse{root.Struct()}, err
}

func (s MudpResponse) String() string {
	str, _ := text.Marshal(0x933e53369a6293b3, s.Struct)
	return str
}

func (s MudpResponse) Namespace() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MudpResponse) HasNamespace() bool {
	return s.Struct.HasPtr(0)
}

func (s MudpResponse) NamespaceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MudpResponse) SetNamespace(v string) error {
	return s.Struct.SetText(0, v)
}

func (s MudpResponse) Envelope() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s MudpResponse) HasEnvelope() bool {
	return s.Struct.HasPtr(1)
}

func (s MudpResponse) SetEnvelope(v []byte) error {
	return s.Struct.SetData(1, v)
}

// MudpResponse_List is a list of MudpResponse.
type MudpResponse_List struct{ capnp.List }

// NewMudpResponse creates a new list of MudpResponse.
func NewMudpResponse_List(s *capnp.Segment, sz int32) (MudpResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return MudpResponse_List{l}, err
}

func (s MudpResponse_List) At(i int) MudpResponse { return MudpResponse{s.List.Struct(i)} }

func (s MudpResponse_List) Set(i int, v MudpResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpResponse_List) String() string {
	str, _ := text.MarshalList(0x933e53369a6293b3, s.List)
	return str
}

// MudpResponse_Future is a wrapper for a MudpResponse promised by a client call.
type MudpResponse_Future struct{ *capnp.Future }

func (p MudpResponse_Future) Struct() (MudpResponse, error) {
	s, err := p.Future.Struct()
	return MudpResponse{s}, err
}

type MudpPacket struct{ capnp.Struct }
type MudpPacket_Which uint16

const (
	MudpPacket_Which_request  MudpPacket_Which = 0
	MudpPacket_Which_response MudpPacket_Which = 1
)

func (w MudpPacket_Which) String() string {
	const s = "requestresponse"
	switch w {
	case MudpPacket_Which_request:
		return s[0:7]
	case MudpPacket_Which_response:
		return s[7:15]

	}
	return "MudpPacket_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MudpPacket_TypeID is the unique identifier for the type MudpPacket.
const MudpPacket_TypeID = 0xf3610b67cd26c199

func NewMudpPacket(s *capnp.Segment) (MudpPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MudpPacket{st}, err
}

func NewRootMudpPacket(s *capnp.Segment) (MudpPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MudpPacket{st}, err
}

func ReadRootMudpPacket(msg *capnp.Message) (MudpPacket, error) {
	root, err := msg.Root()
	return MudpPacket{root.Struct()}, err
}

func (s MudpPacket) String() string {
	str, _ := text.Marshal(0xf3610b67cd26c199, s.Struct)
	return str
}

func (s MudpPacket) Which() MudpPacket_Which {
	return MudpPacket_Which(s.Struct.Uint16(0))
}
func (s MudpPacket) Request() (MudpRequest, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return MudpRequest{Struct: p.Struct()}, err
}

func (s MudpPacket) HasRequest() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MudpPacket) SetRequest(v MudpRequest) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated MudpRequest struct, preferring placement in s's segment.
func (s MudpPacket) NewRequest() (MudpRequest, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewMudpRequest(s.Struct.Segment())
	if err != nil {
		return MudpRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MudpPacket) Response() (MudpResponse, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return MudpResponse{Struct: p.Struct()}, err
}

func (s MudpPacket) HasResponse() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MudpPacket) SetResponse(v MudpResponse) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated MudpResponse struct, preferring placement in s's segment.
func (s MudpPacket) NewResponse() (MudpResponse, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewMudpResponse(s.Struct.Segment())
	if err != nil {
		return MudpResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MudpPacket_List is a list of MudpPacket.
type MudpPacket_List struct{ capnp.List }

// NewMudpPacket creates a new list of MudpPacket.
func NewMudpPacket_List(s *capnp.Segment, sz int32) (MudpPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MudpPacket_List{l}, err
}

func (s MudpPacket_List) At(i int) MudpPacket { return MudpPacket{s.List.Struct(i)} }

func (s MudpPacket_List) Set(i int, v MudpPacket) error { return s.List.SetStruct(i, v.Struct) }

func (s MudpPacket_List) String() string {
	str, _ := text.MarshalList(0xf3610b67cd26c199, s.List)
	return str
}

// MudpPacket_Future is a wrapper for a MudpPacket promised by a client call.
type MudpPacket_Future struct{ *capnp.Future }

func (p MudpPacket_Future) Struct() (MudpPacket, error) {
	s, err := p.Future.Struct()
	return MudpPacket{s}, err
}

func (p MudpPacket_Future) Request() MudpRequest_Future {
	return MudpRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p MudpPacket_Future) Response() MudpResponse_Future {
	return MudpResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_ef83879a531f9bf3 = "x\xdal\x901\x8b\x13A\x1c\xc5\xdf\xfb\xcf%+\xb8" +
	"\xe1v\xd9+\x15AT\xee\xc0\xd3;\x10\x11\x119\x84" +
	"\x83S\x142w\x966\xebf\x90#f3\xc9d\xb5" +
	"\xb4\xb0\x10K\x09\x16\xc6\x0fa\xe1'\xb0\xb1\xb3\xd02" +
	"\xa5\x95\x9dH*\x8b8\xb2\x9b\x98\xc8\x91n\x98y\xcc" +
	"\xef\xfd^\xf4uOvk]\x01\xf4\x99Z\xdd\x7f\x1c" +
	">\x1e]?\xba=D\xbcN?y\x7f\xeeh\xf4\xea" +
	"\xe5O\xd4$\x00\x92\xb3\xfc\x9el\xb1<]\xe4s\xd0" +
	"\xbf\xfbt\xe9\xcb\x93\xd3\xe9\x04z\x9d\xff\x85\xf7\x19\x08" +
	"\x90\xbc\xe6\xb7\xe4m\x95~S\xa5\xdb\x9b?\x0e>\x8f" +
	"\xc3\xe9\x89\xf4\xec\xeb_\x1c'\xd3*\xfc\x9b\x1f\xb0\xed" +
	"S{|\xb5S\xb4\xac\\\xc9R\x9b\xdb\x9b\x0f\x8a\x96" +
	"=4\xcev\x83\xdc\x99&\xa9O\xa95`\x8d@\xbc" +
	"u\x08\xe8ME}M\x18\x93\x1b,/w\xef\x01z" +
	"GQ\xdf\x12\xfa<\xed\x18g\xd3\x0c4\x0c!\x0cA" +
	"o\xf2g\xe6i\xd7\x1a\x00l@\xd8\x00WB\x9bi" +
	"\xd66\x1c\xcc\x91\xa1\xf73\xe6\x1d@_P\xd4;\xc2" +
	"\x06\xff\xf8\x19t\xbb\x84^V\xd47\x84/\xfa\xa6W" +
	"\x187`\xb4\x14\x07\x19\x81\xbe_z\xe4\xaeBG\xcb" +
	"\xc1\xe7\xaf\xab\xcd{\x85Q\xaej\x11.\xc4\xf7\xcf\x03" +
	"zOQ\xdf\x17\xfe\xf3\xbe[V8P\xd4\x0f\x85\xb1" +
	"p\x83\x02\xc4\xba\\\xa8\xa9\xa8\x1f\x09\x03\xd7\xcf\x16\xc2" +
	"\xadc7H\xf3\xacjR\x87\xb0\x8e\x95c\xfd\x0d\x00" +
	"\x00\xff\xff\xfc\x91\x87l"

func init() {
	schemas.Register(schema_ef83879a531f9bf3,
		0x933e53369a6293b3,
		0xf3610b67cd26c199,
		0xfd0cdac648e8286b)
}
