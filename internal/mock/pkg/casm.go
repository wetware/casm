// Code generated by MockGen. DO NOT EDIT.
// Source: casm.go

// Package mock_casm is a generated GoMock package.
package mock_casm

import (
	reflect "reflect"

	capnp "capnproto.org/go/capnp/v3"
	rpc "capnproto.org/go/capnp/v3/rpc"
	gomock "github.com/golang/mock/gomock"
	protocol "github.com/libp2p/go-libp2p-core/protocol"
	casm "github.com/wetware/casm/pkg"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// Protocol mocks base method.
func (m *MockStream) Protocol() protocol.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(protocol.ID)
	return ret0
}

// Protocol indicates an expected call of Protocol.
func (mr *MockStreamMockRecorder) Protocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockStream)(nil).Protocol))
}

// Read mocks base method.
func (m *MockStream) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStreamMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStream)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockStream) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockStreamMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStream)(nil).Write), arg0)
}

// MockClientProvider is a mock of ClientProvider interface.
type MockClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClientProviderMockRecorder
}

// MockClientProviderMockRecorder is the mock recorder for MockClientProvider.
type MockClientProviderMockRecorder struct {
	mock *MockClientProvider
}

// NewMockClientProvider creates a new mock instance.
func NewMockClientProvider(ctrl *gomock.Controller) *MockClientProvider {
	mock := &MockClientProvider{ctrl: ctrl}
	mock.recorder = &MockClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientProvider) EXPECT() *MockClientProviderMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockClientProvider) Client() capnp.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(capnp.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockClientProviderMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClientProvider)(nil).Client))
}

// MockBootstrapper is a mock of Bootstrapper interface.
type MockBootstrapper struct {
	ctrl     *gomock.Controller
	recorder *MockBootstrapperMockRecorder
}

// MockBootstrapperMockRecorder is the mock recorder for MockBootstrapper.
type MockBootstrapperMockRecorder struct {
	mock *MockBootstrapper
}

// NewMockBootstrapper creates a new mock instance.
func NewMockBootstrapper(ctrl *gomock.Controller) *MockBootstrapper {
	mock := &MockBootstrapper{ctrl: ctrl}
	mock.recorder = &MockBootstrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBootstrapper) EXPECT() *MockBootstrapperMockRecorder {
	return m.recorder
}

// Bootstrap mocks base method.
func (m *MockBootstrapper) Bootstrap() capnp.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap")
	ret0, _ := ret[0].(capnp.Client)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockBootstrapperMockRecorder) Bootstrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockBootstrapper)(nil).Bootstrap))
}

// MockMetricReporter is a mock of MetricReporter interface.
type MockMetricReporter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricReporterMockRecorder
}

// MockMetricReporterMockRecorder is the mock recorder for MockMetricReporter.
type MockMetricReporterMockRecorder struct {
	mock *MockMetricReporter
}

// NewMockMetricReporter creates a new mock instance.
func NewMockMetricReporter(ctrl *gomock.Controller) *MockMetricReporter {
	mock := &MockMetricReporter{ctrl: ctrl}
	mock.recorder = &MockMetricReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricReporter) EXPECT() *MockMetricReporterMockRecorder {
	return m.recorder
}

// CountAdd mocks base method.
func (m *MockMetricReporter) CountAdd(key string, value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountAdd", key, value)
}

// CountAdd indicates an expected call of CountAdd.
func (mr *MockMetricReporterMockRecorder) CountAdd(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAdd", reflect.TypeOf((*MockMetricReporter)(nil).CountAdd), key, value)
}

// GaugeAdd mocks base method.
func (m *MockMetricReporter) GaugeAdd(key string, value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GaugeAdd", key, value)
}

// GaugeAdd indicates an expected call of GaugeAdd.
func (mr *MockMetricReporterMockRecorder) GaugeAdd(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeAdd", reflect.TypeOf((*MockMetricReporter)(nil).GaugeAdd), key, value)
}

// MockCapability is a mock of Capability interface.
type MockCapability struct {
	ctrl     *gomock.Controller
	recorder *MockCapabilityMockRecorder
}

// MockCapabilityMockRecorder is the mock recorder for MockCapability.
type MockCapabilityMockRecorder struct {
	mock *MockCapability
}

// NewMockCapability creates a new mock instance.
func NewMockCapability(ctrl *gomock.Controller) *MockCapability {
	mock := &MockCapability{ctrl: ctrl}
	mock.recorder = &MockCapabilityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapability) EXPECT() *MockCapabilityMockRecorder {
	return m.recorder
}

// Protocols mocks base method.
func (m *MockCapability) Protocols() []protocol.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Protocols")
	ret0, _ := ret[0].([]protocol.ID)
	return ret0
}

// Protocols indicates an expected call of Protocols.
func (mr *MockCapabilityMockRecorder) Protocols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocols", reflect.TypeOf((*MockCapability)(nil).Protocols))
}

// Upgrade mocks base method.
func (m *MockCapability) Upgrade(arg0 casm.Stream) rpc.Transport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", arg0)
	ret0, _ := ret[0].(rpc.Transport)
	return ret0
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockCapabilityMockRecorder) Upgrade(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockCapability)(nil).Upgrade), arg0)
}
