// Code generated by MockGen. DO NOT EDIT.
// Source: vat.go

// Package mock_casm is a generated GoMock package.
package mock_casm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocol "github.com/libp2p/go-libp2p-core/protocol"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// Protocol mocks base method.
func (m *MockStream) Protocol() protocol.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(protocol.ID)
	return ret0
}

// Protocol indicates an expected call of Protocol.
func (mr *MockStreamMockRecorder) Protocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockStream)(nil).Protocol))
}

// Read mocks base method.
func (m *MockStream) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStreamMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStream)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockStream) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockStreamMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStream)(nil).Write), arg0)
}

// MockMetricReporter is a mock of MetricReporter interface.
type MockMetricReporter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricReporterMockRecorder
}

// MockMetricReporterMockRecorder is the mock recorder for MockMetricReporter.
type MockMetricReporterMockRecorder struct {
	mock *MockMetricReporter
}

// NewMockMetricReporter creates a new mock instance.
func NewMockMetricReporter(ctrl *gomock.Controller) *MockMetricReporter {
	mock := &MockMetricReporter{ctrl: ctrl}
	mock.recorder = &MockMetricReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricReporter) EXPECT() *MockMetricReporterMockRecorder {
	return m.recorder
}

// CountAdd mocks base method.
func (m *MockMetricReporter) CountAdd(key string, value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountAdd", key, value)
}

// CountAdd indicates an expected call of CountAdd.
func (mr *MockMetricReporterMockRecorder) CountAdd(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAdd", reflect.TypeOf((*MockMetricReporter)(nil).CountAdd), key, value)
}

// GaugeAdd mocks base method.
func (m *MockMetricReporter) GaugeAdd(key string, value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GaugeAdd", key, value)
}

// GaugeAdd indicates an expected call of GaugeAdd.
func (mr *MockMetricReporterMockRecorder) GaugeAdd(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeAdd", reflect.TypeOf((*MockMetricReporter)(nil).GaugeAdd), key, value)
}
