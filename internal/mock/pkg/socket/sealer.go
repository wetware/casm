// Code generated by MockGen. DO NOT EDIT.
// Source: sealer.go

// Package mock_socket is a generated GoMock package.
package mock_socket

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	record "github.com/libp2p/go-libp2p/core/record"
)

// MockSealer is a mock of Sealer interface.
type MockSealer struct {
	ctrl     *gomock.Controller
	recorder *MockSealerMockRecorder
}

// MockSealerMockRecorder is the mock recorder for MockSealer.
type MockSealerMockRecorder struct {
	mock *MockSealer
}

// NewMockSealer creates a new mock instance.
func NewMockSealer(ctrl *gomock.Controller) *MockSealer {
	mock := &MockSealer{ctrl: ctrl}
	mock.recorder = &MockSealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSealer) EXPECT() *MockSealerMockRecorder {
	return m.recorder
}

// Seal mocks base method.
func (m *MockSealer) Seal(arg0 record.Record) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal.
func (mr *MockSealerMockRecorder) Seal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockSealer)(nil).Seal), arg0)
}

// MockHashable is a mock of Hashable interface.
type MockHashable struct {
	ctrl     *gomock.Controller
	recorder *MockHashableMockRecorder
}

// MockHashableMockRecorder is the mock recorder for MockHashable.
type MockHashableMockRecorder struct {
	mock *MockHashable
}

// NewMockHashable creates a new mock instance.
func NewMockHashable(ctrl *gomock.Controller) *MockHashable {
	mock := &MockHashable{ctrl: ctrl}
	mock.recorder = &MockHashableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashable) EXPECT() *MockHashableMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHashable) Hash() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockHashableMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHashable)(nil).Hash))
}
